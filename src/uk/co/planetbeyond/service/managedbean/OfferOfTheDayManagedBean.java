
// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.managedbean;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import org.primefaces.model.LazyDataModel;
import org.primefaces.model.SortOrder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sleepycat.persist.model.Persistent;

import uk.co.planetbeyond.service.generated.OfferCategoryBean;
import uk.co.planetbeyond.service.generated.OfferOfTheDayBean;
import uk.co.planetbeyond.service.generated.exception.DAOException;
import uk.co.planetbeyond.service.manager.FactManagerImpl;
import uk.co.planetbeyond.service.manager.OfferCategoryManagerImpl;
import uk.co.planetbeyond.service.manager.OfferOfTheDayManagerImpl;

/**
 * If any changes needs to be made to the OfferOfTheDayBean, it MUST not be made directly to OfferOfTheDayBean Instead the OfferOfTheDayManagedBean
 * should be used to make the changes
 */
@ManagedBean(name = "offerBean")
@ViewScoped
@Persistent
public class OfferOfTheDayManagedBean extends OfferOfTheDayBean
{
	private static final long serialVersionUID = 3072311189420128425L;
	static Logger log = LoggerFactory.getLogger(OfferOfTheDayManagedBean.class);

	List<OfferOfTheDayBean> listOfOffers;

	LazyDataModel<OfferOfTheDayBean> lazyListofOffers;

	OfferCategoryBean offerCategoryBean;

	/**
	 * Make the constructor public so that it can be accessed externally
	 */
	public OfferOfTheDayManagedBean()
	{
		super();
	}

	/**
	 * Method to save new client in db
	 * 
	 * @return
	 */
	public String saveOffer()
	{

		try
		{

			this.save();
		}
		catch (DAOException e)
		{
			log.error(e.toString(), e);
		}
		return "offer_of_the_day.xhtml?faces-redirect=true";
	}

	/**
	 * Method to get all offers list
	 * 
	 * @return
	 */
	public List<OfferOfTheDayBean> getOffers()
	{

		try
		{
			listOfOffers = OfferOfTheDayManagerImpl.getInstance().loadAllAsList();
		}
		catch (DAOException e)
		{
			log.error(e.toString(), e);
		}
		return listOfOffers;
	}

	/**
	 * Method to get offer category given the offers's id
	 * 
	 * @param categoryId
	 * @return
	 */
	public String getOfferCategory(Integer categoryId)
	{
		try
		{
			offerCategoryBean = OfferCategoryManagerImpl.getInstance().loadByPrimaryKey(categoryId);

			if (offerCategoryBean != null)
			{
				return offerCategoryBean.getName();
			}
		}
		catch (DAOException e)
		{
			log.error(e.toString(), e);

		}
		return null;

	}

	/**
	 * Method to get lazyListofOffers OfferList
	 * 
	 * @return
	 */
	public LazyDataModel<OfferOfTheDayBean> getlazyListofOffers()
	{

		if (lazyListofOffers != null)

		{
			return lazyListofOffers;
		}

		lazyListofOffers = new LazyDataModel<OfferOfTheDayBean>()
		{

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public List<OfferOfTheDayBean> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object> filters)
			{
				try
				{

					List<Object> params = new ArrayList<>();

					String whereClause = "where 1=1";

					lazyListofOffers.setRowCount(FactManagerImpl.getInstance().countAll());

					whereClause += " limit ?,? ";
					params.add(first);
					params.add(pageSize);
					System.out.println(whereClause);

					listOfOffers = OfferOfTheDayManagerImpl.getInstance().loadByPreparedStatementAsList(whereClause, params.toArray(), null);

				}
				catch (DAOException e)
				{
					log.error(e.toString(), e);
				}

				return listOfOffers;

			}

		};

		return lazyListofOffers;

	}

}
