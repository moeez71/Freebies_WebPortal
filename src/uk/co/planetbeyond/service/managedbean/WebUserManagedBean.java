
// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.managedbean;

import java.io.IOException;
import java.util.HashSet;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sleepycat.persist.model.Persistent;

import uk.co.planetbeyond.service.generated.WebUserBean;
import uk.co.planetbeyond.service.generated.exception.DAOException;
import uk.co.planetbeyond.service.manager.WebUserManagerImpl;

/**
 * If any changes needs to be made to the WebUserBean, it MUST not be made directly to WebUserBean Instead the WebUserManagedBean should be used to
 * make the changes
 */
@Persistent
@ManagedBean(name = "webUserBean")
@ViewScoped
public class WebUserManagedBean extends WebUserBean
{
	private static final long serialVersionUID = 875081511999928406L;

	private static HashSet<String> unsecurePages;

	private static Logger log = LoggerFactory.getLogger(WebUserManagedBean.class);

	static
	{
		unsecurePages = new HashSet<String>();
		unsecurePages.add("admin_login");
	}

	/**
	 * Make the constructor public so that it can be accessed externally
	 */
	public WebUserManagedBean()
	{
		super();
	}

	public static HashSet<String> getUnsecurePages()
	{
		return unsecurePages;
	}

	public String logout() throws DAOException, IOException
	{

		// ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getSession().setAttribute("webUserBean", null);
		((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getSession().invalidate();
		FacesContext.getCurrentInstance().getExternalContext().redirect("login.faces");
		return "null";
	}

	/**
	 * Logs in the user depending on name and password contained in the current webUserBean. If username and password are incorrect, then invalid
	 * username,password message to faces context, other wise puts the user in the session.
	 * 
	 * Returns the url of the page to which user should be redirected.
	 * 
	 * @throws Throwable
	 */
	public String login() throws Throwable
	{
		try
		{
			WebUserBean user = WebUserManagerImpl.getInstance().loadSingleEntryByPreparedStatement(" WHERE name=? AND password=? LIMIT 1 ", new Object[] { getName(), getPassword() }, null);

			// check if password/username are valid
			if (user == null)
			{
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, "Invalid Username or Password", null));
				return null;
			}

			// here we know that the user name and password are valid
			HttpSession session = ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getSession();
			session.setAttribute("webUserBean", user);

			// // save successful session in loggedInUser table
			// LoggedInInformationBean bean = LoggedInInformationManagedBean.newInstance();
			// bean.setWebUserId(user.getWebUserId());
			//
			// // first check the value of header "X-Forwarded-For". If IP address is found in this header, it will be used as IP of the user. If IP
			// // address
			// // is not found in this header, it will fall back to the other method
			//
			// HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
			// String ipAddress = request.getHeader("X-FORWARDED-FOR");
			// if (ipAddress == null)
			// {
			// ipAddress = request.getRemoteAddr();
			// }
			//
			// log.info("Logging Web User's IP Address: {}", new Object[] { ipAddress });
			//
			// // delete previous entries for this ipAddress from logged_in_information table.
			// LoggedInInformationManagerImpl.getInstance().deleteByWhere("WHERE ip_address ='" + ipAddress + "';");
			//
			// bean.setIpAddress(ipAddress);
			// bean.save();

			FacesContext.getCurrentInstance().getExternalContext().redirect("home_screen.faces");

		}
		catch (Throwable e)
		{
			log.error(e.toString(), e);
			throw e;
		}
		return null;
	}

	public boolean isAllowPage(String pageName)
	{
		HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
		return isAllowPage(pageName, request);
	}

	public boolean isAllowPage(String pageName, HttpServletRequest request)
	{
		if (unsecurePages.contains(pageName))
		{
			return true;
		}
		HttpSession session = request.getSession();
		WebUserBean loggedInUser = (WebUserBean) session.getAttribute("webUserBean");
		if (loggedInUser == null)
		{
			return false;
		}
		return true;
	}

	public boolean isShowLoginLink()
	{
		WebUserBean loggedInUser = (WebUserBean) ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getSession().getAttribute("webUserBean");
		if (loggedInUser == null)
			return true;
		return false;
	}

	public boolean isShowLogoutLink()
	{
		return !isShowLoginLink();
	}

	public String getLoggedInUserName()
	{
		WebUserBean loggedInUser = (WebUserBean) ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getSession().getAttribute("webUserBean");
		return loggedInUser.getName();
	}
}
