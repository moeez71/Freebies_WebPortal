
// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.managedbean;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import org.primefaces.model.LazyDataModel;
import org.primefaces.model.SortOrder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sleepycat.persist.model.Persistent;

import uk.co.planetbeyond.service.generated.ClientBean;
import uk.co.planetbeyond.service.generated.exception.DAOException;
import uk.co.planetbeyond.service.manager.ClientManagerImpl;
import uk.co.planetbeyond.service.manager.FactManagerImpl;

/**
 * If any changes needs to be made to the ClientBean, it MUST not be made directly to ClientBean Instead the ClientManagedBean should be used to make
 * the changes
 */
@ManagedBean(name = "clientBean")
@ViewScoped
@Persistent
public class ClientManagedBean extends ClientBean
{
	private static final long serialVersionUID = 3072311189420128425L;
	private static Logger log = LoggerFactory.getLogger(ClientManagedBean.class);

	List<ClientBean> listOfClients;
	LazyDataModel<ClientBean> lazyListOfClients;

	/**
	 * Make the constructor public so that it can be accessed externally
	 */
	public ClientManagedBean()
	{
		super();
	}

	/**
	 * Method to save new client in database
	 * 
	 * @returns user to clients display page
	 */

	public String saveClient()
	{

		try
		{// TODO: Validation in next phase
			ClientBean bean = new ClientBean();

			bean.setClientName(clientName);
			bean.setAddress(address);
			bean.setEmail(email);
			bean.setContactNumber(contactNumber);
			bean.setCreationTimestamp(new Date());
			bean.save();
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}
		return "add_client.xhtml?faces-redirect=true";
	}

	/**
	 * Method to load a client and copy properties to its cALLING bean given his clientId
	 */

	public void editClient()
	{

		try
		{
			// FacesContext.getCurrentInstance().getExternalContext().redirect(url);
			ClientBean bean = ClientManagerImpl.getInstance().loadByPrimaryKey(this.getClientId());

			this.copy(bean);
		}
		catch (Exception e)
		{
			log.error(e.getMessage(), e);
		}

	}

	/**
	 * Method to update a client
	 * 
	 * @returns user to client display page
	 */

	public String updateClient()
	{

		try
		{
			this.isNew(false);
			this.update();
		}
		catch (DAOException e)
		{
			// TODO Auto-generated catch block
			log.error(e.getMessage(), e);
		}
		return "add_client.xhtml?faces-redirect=true";
	}

	/**
	 * Method to delete a client from database given its id
	 * 
	 * @param id
	 * @returns user to clients display page
	 */

	public String deleteClient(int clientId)
	{

		try
		{
			ClientManagerImpl.getInstance().deleteByPrimaryKey(clientId);

			System.out.println("deleted");
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}
		return "add_client.xhtml?faces-redirect=true";
	}

	/**
	 * Method to get lazyListOfClients
	 * 
	 * @return
	 */
	public LazyDataModel<ClientBean> getlazyListOfClients()
	{

		if (lazyListOfClients != null)
		{
			return lazyListOfClients;
		}

		lazyListOfClients = new LazyDataModel<ClientBean>()
		{

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public List<ClientBean> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object> filters)
			{
				try
				{

					List<Object> params = new ArrayList<>();

					String whereClause = "where 1=1";

					lazyListOfClients.setRowCount(FactManagerImpl.getInstance().countAll());

					whereClause += " limit ?,? ";
					params.add(first);
					params.add(pageSize);

					listOfClients = ClientManagerImpl.getInstance().loadByPreparedStatementAsList(whereClause, params.toArray(), null);

				}
				catch (DAOException e)
				{
					log.error(e.getMessage(), e);
				}

				return listOfClients;

			}

		};

		return lazyListOfClients;

	}

	/**
	 * Method to return all the clients as list from database
	 * 
	 * @return
	 */

	public List<ClientBean> getClientsList()
	{

		try
		{
			listOfClients = ClientManagerImpl.getInstance().loadAllAsList();
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}
		return listOfClients;
	}

}
