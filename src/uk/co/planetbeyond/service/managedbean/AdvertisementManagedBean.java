
// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.managedbean;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.LazyDataModel;
import org.primefaces.model.SortOrder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sleepycat.persist.model.Persistent;

import uk.co.planetbeyond.service.constants.Constants;
import uk.co.planetbeyond.service.generated.AdvertScheduleBean;
import uk.co.planetbeyond.service.generated.AdvertisementBean;
import uk.co.planetbeyond.service.generated.exception.DAOException;
import uk.co.planetbeyond.service.manager.AdvertScheduleManagerImpl;
import uk.co.planetbeyond.service.manager.AdvertisementManagerImpl;
import uk.co.planetbeyond.service.manager.FactManagerImpl;
import uk.co.planetbeyond.service.utils.FTPUploader;
import uk.co.planetbeyond.util.StringUtil;

/**
 * If any changes needs to be made to the AdvertisementBean, it MUST not be made directly to AdvertisementBean Instead the AdvertisementManagedBean
 * should be used to make the changes
 */
@ManagedBean(name = "advertisementBean")
@ViewScoped
@Persistent
public class AdvertisementManagedBean extends AdvertisementBean
{
	private static final long serialVersionUID = 5811890509195267354L;
	static Logger log = LoggerFactory.getLogger(AdvertisementBean.class);

	List<AdvertisementBean> listOfAds;

	LazyDataModel<AdvertisementBean> lazyListOfAds;

	/**
	 * Make the constructor public so that it can be accessed externally
	 */
	public AdvertisementManagedBean()
	{
		super();
	}

	/**
	 * Method to save a new add to database
	 * 
	 * @return
	 */

	public String saveAd()
	{

		try
		{

			this.setPath(Constants.get().PATH_LINK);
			this.setScheduleId(getScheduleId());
			this.save();
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}
		return "advertisement.xhtml?id=" + this.getScheduleId() + "faces-redirect=true";
	}

	/**
	 * Method to get Saved ads list from database
	 * 
	 * @return
	 */
	public List<AdvertisementBean> getAdsList()
	{

		try
		{
			String whereClause = "where 1=1 and schedule_id = " + getScheduleId();
			// String whereClause = "where 1=1 and schedule_id = 3";
			// String whereClause = "where 1 = 1";
			listOfAds = AdvertisementManagerImpl.getInstance().loadByPreparedStatementAsList(whereClause, new Object[] {}, null);
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}
		return listOfAds;
	}

	/**
	 * Method to get scheduleNAme of an ad given ad's Id
	 * 
	 * @param hostId
	 * @return
	 */
	public String getScheduleName(Integer hostId)
	{
		try
		{
			AdvertScheduleBean bean = AdvertScheduleManagerImpl.getInstance().loadByPrimaryKey(hostId);

			if (bean != null)
			{
				return bean.getName();
			}
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}

		return null;

	}

	/**
	 * Method to get lazy model Advertisment List
	 * 
	 * @return
	 */
	@SuppressWarnings("serial")
	public LazyDataModel<AdvertisementBean> getlazyListOfAds()
	{

		if (lazyListOfAds != null)
		{
			return lazyListOfAds;
		}

		lazyListOfAds = new LazyDataModel<AdvertisementBean>()
		{
			@Override
			public List<AdvertisementBean> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object> filters)
			{
				try
				{

					List<Object> params = new ArrayList<>();

					String whereClause = "WHERE 1=1 AND schedule_id = " + getScheduleId();

					lazyListOfAds.setRowCount(FactManagerImpl.getInstance().countAll());

					whereClause += " LIMIT ?,? ";
					params.add(first);
					params.add(pageSize);

					listOfAds = AdvertisementManagerImpl.getInstance().loadByPreparedStatementAsList(whereClause, params.toArray(), null);

				}
				catch (DAOException e)
				{
					log.error(e.getMessage(), e);
				}

				return listOfAds;

			}

		};

		return lazyListOfAds;

	}

	/**
	 * upload file on ftp server
	 * 
	 * @param event
	 * @throws Exception
	 */

	public void handleFileUpload(FileUploadEvent event)
	{
		try
		{
			if (!validateFile(event))
			{
				return;
			}
			FacesMessage message = new FacesMessage("Succesful", event.getFile().getFileName() + " is uploaded.");
			log.info("uploadingFile: " + event.getFile().getFileName());
			FileInputStream inputStream = (FileInputStream) event.getFile().getInputstream();

			uploadVideoFileOnFtpServer(inputStream, event.getFile().getFileName());

			// uploadImageFileOnFtpServer(event.getFile().getInputstream()., event.getFile().getContentType());
			FacesContext.getCurrentInstance().addMessage(null, message);
		}
		catch (Throwable e)
		{
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "ERROR: " + e.toString(), null));
			log.error(e.toString(), e);
		}
	}

	/**
	 * Method to validate uploaded file
	 * 
	 * @param event
	 * @return
	 */
	public boolean validateFile(FileUploadEvent event)
	{
		Long size = event.getFile().getSize() / 1024;
		if (size > Constants.get().HIGHLIGHTS_MAX_FILE_SIZE_KILOBYTES)
		{
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "File Size Exceeds " + Constants.get().HIGHLIGHTS_MAX_FILE_SIZE_KILOBYTES + " Limit!", ""));
			FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
			return false;
		}

		return true;
	}

	/**
	 * This function will upload file on server
	 * 
	 * @param videoFilename
	 * @throws Exception
	 */
	public void uploadVideoFileOnFtpServer(FileInputStream inputStream, String clientFileName)
	{
		FTPUploader ftpClient = null;
		String fileName = (new Date()).getTime() + "_" + clientFileName.replaceAll(" ", "");
		String ftpFilePath = null;

		try
		{

			ftpFilePath = StringUtil.normalizePath(Constants.get().URL_FOR_REUSEABLE_CONTENT) + fileName;
			// String localFilepath = StringUtil.normalizePath(Constants.get().SCORE_CARD_IMAGES_SOURCE_DIR) + imageFileName;
			this.setFilename(Constants.get().URL_FOR_CONTENT + fileName);
			ftpClient = new FTPUploader(Constants.get().FTP_SERVER_ADDRESS, Constants.get().FTP_SERVER_USERNAME, Constants.get().FTP_SERVER_PASSWORD, Constants.get().FTP_TIMEOUT_MILLISECONDS);

			log.info("Uploading file:{} to ftp.", new Object[] { fileName });

			ftpClient.uploadFileToFtpServer(ftpFilePath, inputStream);
			log.info("Successfully uploaded file Chatbot FTP server = {} | REMOTE FILE = {}", new Object[] { Constants.get().FTP_SERVER_ADDRESS, ftpFilePath });
		}
		catch (Exception e)
		{
			log.error(e.toString(), e);
			log.info("File:{} upload to path:{} failed on ftp server", new Object[] { fileName, ftpFilePath });
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "ERROR: " + e.toString(), null));
		}
		finally
		{
			if (ftpClient != null)
			{
				// now clean up the ftp client
				ftpClient.cleanUpResources();
			}
			if (inputStream != null)
			{
				try
				{
					inputStream.close();
				}
				catch (Throwable e)
				{
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "ERROR: " + e.toString(), null));
					log.error(e.toString(), e);
				}
			}
		}
	}

}
