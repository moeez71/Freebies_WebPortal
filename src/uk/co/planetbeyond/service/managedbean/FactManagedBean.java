
// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.managedbean;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;

import org.primefaces.model.LazyDataModel;
import org.primefaces.model.SortOrder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sleepycat.persist.model.Persistent;

import uk.co.planetbeyond.service.generated.FactBean;
import uk.co.planetbeyond.service.generated.exception.DAOException;
import uk.co.planetbeyond.service.manager.FactManagerImpl;

/**
 * If any changes needs to be made to the FactBean, it MUST not be made directly to FactBean Instead the FactManagedBean should be used to make the
 * changes
 */
@ManagedBean(name = "factBean")
@RequestScoped
@Persistent
public class FactManagedBean extends FactBean
{
	private static final long serialVersionUID = 3072311189420128425L;
	static Logger log = LoggerFactory.getLogger(FactManagedBean.class);

	List<FactBean> listOfFacts;
	LazyDataModel<FactBean> lazyListOfFacts;

	/**
	 * Make the constructor public so that it can be accessed externally
	 */
	public FactManagedBean()
	{
		super();
	}

	/**
	 * Method to save new fact in database
	 * 
	 * @returns user to facts display page
	 */
	public String saveFact()
	{

		try
		{
			FactBean bean = new FactBean();

			bean.setText(text);
			bean.setCreationTimestamp(new Date());
			bean.save();
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}
		return "fact.xhtml?faces-redirect=true";
	}

	/**
	 * Method to load a fact and copy properties to its cALLING bean given its factId
	 */

	public void editFact()
	{

		System.out.println(this.getFactId());
		try
		{
			// FacesContext.getCurrentInstance().getExternalContext().redirect(url);
			FactBean bean = FactManagerImpl.getInstance().loadByPrimaryKey(this.getFactId());

			this.copy(bean);
		}
		catch (Exception e)
		{
			log.error(e.getMessage(), e);
		}

	}

	/**
	 * Method to update a fact
	 * 
	 * @returns user to facts display page
	 */
	public String updateFact()
	{

		try
		{
			this.isNew(false);
			this.update();
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}
		return "fact.xhtml?faces-redirect=true";
	}

	/**
	 * Method to delete a fact from database given its id
	 * 
	 * @param id
	 * @returns user to facts display page
	 */

	public String deleteFact(int id)
	{
		System.out.println("called");
		try
		{
			FactManagerImpl.getInstance().deleteByPrimaryKey(id);

			System.out.println("deleted");
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}
		return "fact.xhtml?faces-redirect=true";
	}

	/**
	 * Method to bring lazyListOfFacts listOfFacts
	 * 
	 * @return
	 */
	public LazyDataModel<FactBean> getlazyListOfFacts()
	{

		if (lazyListOfFacts != null)

		{
			return lazyListOfFacts;
		}

		lazyListOfFacts = new LazyDataModel<FactBean>()
		{

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public List<FactBean> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object> filters)
			{
				try
				{

					List<Object> params = new ArrayList<>();

					String whereClause = "where 1=1";

					lazyListOfFacts.setRowCount(FactManagerImpl.getInstance().countAll());

					whereClause += " limit ?,? ";
					params.add(first);
					params.add(pageSize);
					System.out.println(whereClause);

					listOfFacts = FactManagerImpl.getInstance().loadByPreparedStatementAsList(whereClause, params.toArray(), null);

				}
				catch (DAOException e)
				{
					log.error(e.getMessage(), e);
				}

				return listOfFacts;

			}

		};

		return lazyListOfFacts;

	}

	public void example()
	{
		System.out.println("hi");
	}

}
