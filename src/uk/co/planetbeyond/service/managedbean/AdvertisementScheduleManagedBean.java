
// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.managedbean;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import org.primefaces.model.LazyDataModel;
import org.primefaces.model.SortOrder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sleepycat.persist.model.Persistent;

import uk.co.planetbeyond.service.generated.AdvertScheduleBean;
import uk.co.planetbeyond.service.generated.ClientBean;
import uk.co.planetbeyond.service.generated.exception.DAOException;
import uk.co.planetbeyond.service.manager.AdvertScheduleManagerImpl;
import uk.co.planetbeyond.service.manager.ClientManagerImpl;
import uk.co.planetbeyond.service.manager.FactManagerImpl;

/**
 * If any changes needs to be made to the AdvertScheduleBean, it MUST not be made directly to AdvertScheduleBean Instead the AdvertScheduleManagedBean
 * should be used to make the changes
 */
@ManagedBean(name = "advertisementScheduleBean")
@ViewScoped
@Persistent
public class AdvertisementScheduleManagedBean extends AdvertScheduleBean
{
	private static final long serialVersionUID = -105292313993132227L;
	private static Logger log = LoggerFactory.getLogger(AdvertScheduleBean.class);

	List<AdvertScheduleBean> adScheduleList;
	LazyDataModel<AdvertScheduleBean> lazyListofSchedules;

	/**
	 * Make the constructor public so that it can be accessed externally
	 */
	public AdvertisementScheduleManagedBean()
	{
		super();
	}

	/**
	 * Method to save new client in db
	 * 
	 * @returns user to clients display page
	 */
	public String saveSchedule()
	{

		try
		{
			this.setCreationTimestamp(new Date());
			this.save();
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}
		return "schedule_ad.xhtml?faces-redirect=true";
	}

	/**
	 * Method to get Schedule List
	 * 
	 * @returns scheduleList
	 */
	public List<AdvertScheduleBean> getScheduleList()
	{

		try
		{
			adScheduleList = AdvertScheduleManagerImpl.getInstance().loadAllAsList();
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}
		return adScheduleList;
	}

	/**
	 * Method to get client name given a client ID
	 * 
	 * @param hostId
	 * @return
	 */
	public String getClientName(Integer clientId)
	{
		try
		{
			ClientBean bean = ClientManagerImpl.getInstance().loadByPrimaryKey(clientId);

			if (bean != null)
			{
				return bean.getClientName();
			}
		}
		catch (DAOException e)
		{
			log.error(e.getMessage(), e);
		}

		return null;

	}

	/**
	 * Method to get lazyListofSchedules Schedule List
	 * 
	 * @return
	 */

	public LazyDataModel<AdvertScheduleBean> getlazyListofSchedules()
	{

		if (lazyListofSchedules != null)

		{
			return lazyListofSchedules;
		}

		lazyListofSchedules = new LazyDataModel<AdvertScheduleBean>()
		{

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public List<AdvertScheduleBean> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object> filters)
			{
				try
				{

					List<Object> params = new ArrayList<>();

					String whereClause = "WHERE 1=1 ";

					lazyListofSchedules.setRowCount(FactManagerImpl.getInstance().countAll());

					whereClause += " limit ?,? ";
					params.add(first);
					params.add(pageSize);
					System.out.println(whereClause);

					adScheduleList = AdvertScheduleManagerImpl.getInstance().loadByPreparedStatementAsList(whereClause, params.toArray(), null);

				}
				catch (DAOException e)
				{
					log.error(e.getMessage(), e);
				}

				return adScheduleList;

			}

		};

		return lazyListofSchedules;

	}

}
