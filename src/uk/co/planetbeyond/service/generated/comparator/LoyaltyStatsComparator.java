




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated.comparator;

import java.util.Comparator;
import uk.co.planetbeyond.service.generated.LoyaltyStatsBean;
import uk.co.planetbeyond.service.generated.LoyaltyStatsManager;


/**
 * Comparator class is used to sort the LoyaltyStatsBean objects.
 * @author sql2java
 */
public class LoyaltyStatsComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for LoyaltyStatsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new LoyaltyStatsComparator(LoyaltyStatsManager.ID_LAST_UPDATED, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>LoyaltyStatsManager.ID_LAST_UPDATED
     *   <li>LoyaltyStatsManager.ID_POINTS_REMAINING
     *   <li>LoyaltyStatsManager.ID_POINTS_CONSUMED
     *   <li>LoyaltyStatsManager.ID_TOTAL_POINTS
     *   <li>LoyaltyStatsManager.ID_LOYALTY_STAT_ID
     * </ul>
     */
    public LoyaltyStatsComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for LoyaltyStatsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new LoyaltyStatsComparator(LoyaltyStatsManager.ID_LAST_UPDATED, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>LoyaltyStatsManager.ID_LAST_UPDATED
     *   <li>LoyaltyStatsManager.ID_POINTS_REMAINING
     *   <li>LoyaltyStatsManager.ID_POINTS_CONSUMED
     *   <li>LoyaltyStatsManager.ID_TOTAL_POINTS
     *   <li>LoyaltyStatsManager.ID_LOYALTY_STAT_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public LoyaltyStatsComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        LoyaltyStatsBean b1 = (LoyaltyStatsBean)pObj1;
        LoyaltyStatsBean b2 = (LoyaltyStatsBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case LoyaltyStatsManager.ID_LAST_UPDATED:
                if (b1.getLastUpdated() == null && b2.getLastUpdated() != null) {
                    iReturn = -1;
                } else if (b1.getLastUpdated() == null && b2.getLastUpdated() == null) {
                    iReturn = 0;
                } else if (b1.getLastUpdated() != null && b2.getLastUpdated() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLastUpdated().compareTo(b2.getLastUpdated());
                }
                break;
            case LoyaltyStatsManager.ID_POINTS_REMAINING:
                if (b1.getPointsRemaining() == null && b2.getPointsRemaining() != null) {
                    iReturn = -1;
                } else if (b1.getPointsRemaining() == null && b2.getPointsRemaining() == null) {
                    iReturn = 0;
                } else if (b1.getPointsRemaining() != null && b2.getPointsRemaining() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPointsRemaining().compareTo(b2.getPointsRemaining());
                }
                break;
            case LoyaltyStatsManager.ID_POINTS_CONSUMED:
                if (b1.getPointsConsumed() == null && b2.getPointsConsumed() != null) {
                    iReturn = -1;
                } else if (b1.getPointsConsumed() == null && b2.getPointsConsumed() == null) {
                    iReturn = 0;
                } else if (b1.getPointsConsumed() != null && b2.getPointsConsumed() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPointsConsumed().compareTo(b2.getPointsConsumed());
                }
                break;
            case LoyaltyStatsManager.ID_TOTAL_POINTS:
                if (b1.getTotalPoints() == null && b2.getTotalPoints() != null) {
                    iReturn = -1;
                } else if (b1.getTotalPoints() == null && b2.getTotalPoints() == null) {
                    iReturn = 0;
                } else if (b1.getTotalPoints() != null && b2.getTotalPoints() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTotalPoints().compareTo(b2.getTotalPoints());
                }
                break;
            case LoyaltyStatsManager.ID_LOYALTY_STAT_ID:
                if (b1.getLoyaltyStatId() == null && b2.getLoyaltyStatId() != null) {
                    iReturn = -1;
                } else if (b1.getLoyaltyStatId() == null && b2.getLoyaltyStatId() == null) {
                    iReturn = 0;
                } else if (b1.getLoyaltyStatId() != null && b2.getLoyaltyStatId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLoyaltyStatId().compareTo(b2.getLoyaltyStatId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
