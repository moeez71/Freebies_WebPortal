




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated.comparator;

import java.util.Comparator;
import uk.co.planetbeyond.service.generated.SubscriberStatsBean;
import uk.co.planetbeyond.service.generated.SubscriberStatsManager;


/**
 * Comparator class is used to sort the SubscriberStatsBean objects.
 * @author sql2java
 */
public class SubscriberStatsComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for SubscriberStatsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SubscriberStatsComparator(SubscriberStatsManager.ID_SMS_ALERT_ELIGIBLE_STATUS, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SubscriberStatsManager.ID_SMS_ALERT_ELIGIBLE_STATUS
     *   <li>SubscriberStatsManager.ID_LASTSMS_ALERT_DATE
     *   <li>SubscriberStatsManager.ID_LASTSMS_ALERT_ID
     *   <li>SubscriberStatsManager.ID_LASTVIEWED_FACT_ID
     *   <li>SubscriberStatsManager.ID_LASTVIEWED_AD_WATCHTIME
     *   <li>SubscriberStatsManager.ID_LASTVIEWED_AD_ID
     *   <li>SubscriberStatsManager.ID_SUBSCRIBER_STATS_ID
     * </ul>
     */
    public SubscriberStatsComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for SubscriberStatsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SubscriberStatsComparator(SubscriberStatsManager.ID_SMS_ALERT_ELIGIBLE_STATUS, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SubscriberStatsManager.ID_SMS_ALERT_ELIGIBLE_STATUS
     *   <li>SubscriberStatsManager.ID_LASTSMS_ALERT_DATE
     *   <li>SubscriberStatsManager.ID_LASTSMS_ALERT_ID
     *   <li>SubscriberStatsManager.ID_LASTVIEWED_FACT_ID
     *   <li>SubscriberStatsManager.ID_LASTVIEWED_AD_WATCHTIME
     *   <li>SubscriberStatsManager.ID_LASTVIEWED_AD_ID
     *   <li>SubscriberStatsManager.ID_SUBSCRIBER_STATS_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public SubscriberStatsComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        SubscriberStatsBean b1 = (SubscriberStatsBean)pObj1;
        SubscriberStatsBean b2 = (SubscriberStatsBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case SubscriberStatsManager.ID_SMS_ALERT_ELIGIBLE_STATUS:
                if (b1.getSmsAlertEligibleStatus() == null && b2.getSmsAlertEligibleStatus() != null) {
                    iReturn = -1;
                } else if (b1.getSmsAlertEligibleStatus() == null && b2.getSmsAlertEligibleStatus() == null) {
                    iReturn = 0;
                } else if (b1.getSmsAlertEligibleStatus() != null && b2.getSmsAlertEligibleStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSmsAlertEligibleStatus().compareTo(b2.getSmsAlertEligibleStatus());
                }
                break;
            case SubscriberStatsManager.ID_LASTSMS_ALERT_DATE:
                if (b1.getLastsmsAlertDate() == null && b2.getLastsmsAlertDate() != null) {
                    iReturn = -1;
                } else if (b1.getLastsmsAlertDate() == null && b2.getLastsmsAlertDate() == null) {
                    iReturn = 0;
                } else if (b1.getLastsmsAlertDate() != null && b2.getLastsmsAlertDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLastsmsAlertDate().compareTo(b2.getLastsmsAlertDate());
                }
                break;
            case SubscriberStatsManager.ID_LASTSMS_ALERT_ID:
                if (b1.getLastsmsAlertId() == null && b2.getLastsmsAlertId() != null) {
                    iReturn = -1;
                } else if (b1.getLastsmsAlertId() == null && b2.getLastsmsAlertId() == null) {
                    iReturn = 0;
                } else if (b1.getLastsmsAlertId() != null && b2.getLastsmsAlertId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLastsmsAlertId().compareTo(b2.getLastsmsAlertId());
                }
                break;
            case SubscriberStatsManager.ID_LASTVIEWED_FACT_ID:
                if (b1.getLastviewedFactId() == null && b2.getLastviewedFactId() != null) {
                    iReturn = -1;
                } else if (b1.getLastviewedFactId() == null && b2.getLastviewedFactId() == null) {
                    iReturn = 0;
                } else if (b1.getLastviewedFactId() != null && b2.getLastviewedFactId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLastviewedFactId().compareTo(b2.getLastviewedFactId());
                }
                break;
            case SubscriberStatsManager.ID_LASTVIEWED_AD_WATCHTIME:
                if (b1.getLastviewedAdWatchtime() == null && b2.getLastviewedAdWatchtime() != null) {
                    iReturn = -1;
                } else if (b1.getLastviewedAdWatchtime() == null && b2.getLastviewedAdWatchtime() == null) {
                    iReturn = 0;
                } else if (b1.getLastviewedAdWatchtime() != null && b2.getLastviewedAdWatchtime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLastviewedAdWatchtime().compareTo(b2.getLastviewedAdWatchtime());
                }
                break;
            case SubscriberStatsManager.ID_LASTVIEWED_AD_ID:
                if (b1.getLastviewedAdId() == null && b2.getLastviewedAdId() != null) {
                    iReturn = -1;
                } else if (b1.getLastviewedAdId() == null && b2.getLastviewedAdId() == null) {
                    iReturn = 0;
                } else if (b1.getLastviewedAdId() != null && b2.getLastviewedAdId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLastviewedAdId().compareTo(b2.getLastviewedAdId());
                }
                break;
            case SubscriberStatsManager.ID_SUBSCRIBER_STATS_ID:
                if (b1.getSubscriberStatsId() == null && b2.getSubscriberStatsId() != null) {
                    iReturn = -1;
                } else if (b1.getSubscriberStatsId() == null && b2.getSubscriberStatsId() == null) {
                    iReturn = 0;
                } else if (b1.getSubscriberStatsId() != null && b2.getSubscriberStatsId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSubscriberStatsId().compareTo(b2.getSubscriberStatsId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
