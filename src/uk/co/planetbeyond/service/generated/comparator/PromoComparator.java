




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated.comparator;

import java.util.Comparator;
import uk.co.planetbeyond.service.generated.PromoBean;
import uk.co.planetbeyond.service.generated.PromoManager;


/**
 * Comparator class is used to sort the PromoBean objects.
 * @author sql2java
 */
public class PromoComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for PromoComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new PromoComparator(PromoManager.ID_CREATION_TIMESTAMP, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>PromoManager.ID_CREATION_TIMESTAMP
     *   <li>PromoManager.ID_DETAIL
     *   <li>PromoManager.ID_CODE
     *   <li>PromoManager.ID_PROMO_ID
     * </ul>
     */
    public PromoComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for PromoComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new PromoComparator(PromoManager.ID_CREATION_TIMESTAMP, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>PromoManager.ID_CREATION_TIMESTAMP
     *   <li>PromoManager.ID_DETAIL
     *   <li>PromoManager.ID_CODE
     *   <li>PromoManager.ID_PROMO_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public PromoComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        PromoBean b1 = (PromoBean)pObj1;
        PromoBean b2 = (PromoBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case PromoManager.ID_CREATION_TIMESTAMP:
                if (b1.getCreationTimestamp() == null && b2.getCreationTimestamp() != null) {
                    iReturn = -1;
                } else if (b1.getCreationTimestamp() == null && b2.getCreationTimestamp() == null) {
                    iReturn = 0;
                } else if (b1.getCreationTimestamp() != null && b2.getCreationTimestamp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCreationTimestamp().compareTo(b2.getCreationTimestamp());
                }
                break;
            case PromoManager.ID_DETAIL:
                if (b1.getDetail() == null && b2.getDetail() != null) {
                    iReturn = -1;
                } else if (b1.getDetail() == null && b2.getDetail() == null) {
                    iReturn = 0;
                } else if (b1.getDetail() != null && b2.getDetail() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getDetail().compareTo(b2.getDetail());
                }
                break;
            case PromoManager.ID_CODE:
                if (b1.getCode() == null && b2.getCode() != null) {
                    iReturn = -1;
                } else if (b1.getCode() == null && b2.getCode() == null) {
                    iReturn = 0;
                } else if (b1.getCode() != null && b2.getCode() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCode().compareTo(b2.getCode());
                }
                break;
            case PromoManager.ID_PROMO_ID:
                if (b1.getPromoId() == null && b2.getPromoId() != null) {
                    iReturn = -1;
                } else if (b1.getPromoId() == null && b2.getPromoId() == null) {
                    iReturn = 0;
                } else if (b1.getPromoId() != null && b2.getPromoId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getPromoId().compareTo(b2.getPromoId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
