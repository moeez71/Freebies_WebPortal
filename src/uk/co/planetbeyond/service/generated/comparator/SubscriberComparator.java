




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated.comparator;

import java.util.Comparator;
import uk.co.planetbeyond.service.generated.SubscriberBean;
import uk.co.planetbeyond.service.generated.SubscriberManager;


/**
 * Comparator class is used to sort the SubscriberBean objects.
 * @author sql2java
 */
public class SubscriberComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for SubscriberComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SubscriberComparator(SubscriberManager.ID_CREATION_TIMESTAMP, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SubscriberManager.ID_CREATION_TIMESTAMP
     *   <li>SubscriberManager.ID_DEVICE_ID
     *   <li>SubscriberManager.ID_FIREBASE_TOKEN_ID
     *   <li>SubscriberManager.ID_NAME
     *   <li>SubscriberManager.ID_MSISDN
     *   <li>SubscriberManager.ID_SUBSCRIBER_ID
     * </ul>
     */
    public SubscriberComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for SubscriberComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new SubscriberComparator(SubscriberManager.ID_CREATION_TIMESTAMP, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>SubscriberManager.ID_CREATION_TIMESTAMP
     *   <li>SubscriberManager.ID_DEVICE_ID
     *   <li>SubscriberManager.ID_FIREBASE_TOKEN_ID
     *   <li>SubscriberManager.ID_NAME
     *   <li>SubscriberManager.ID_MSISDN
     *   <li>SubscriberManager.ID_SUBSCRIBER_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public SubscriberComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        SubscriberBean b1 = (SubscriberBean)pObj1;
        SubscriberBean b2 = (SubscriberBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case SubscriberManager.ID_CREATION_TIMESTAMP:
                if (b1.getCreationTimestamp() == null && b2.getCreationTimestamp() != null) {
                    iReturn = -1;
                } else if (b1.getCreationTimestamp() == null && b2.getCreationTimestamp() == null) {
                    iReturn = 0;
                } else if (b1.getCreationTimestamp() != null && b2.getCreationTimestamp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCreationTimestamp().compareTo(b2.getCreationTimestamp());
                }
                break;
            case SubscriberManager.ID_DEVICE_ID:
                if (b1.getDeviceId() == null && b2.getDeviceId() != null) {
                    iReturn = -1;
                } else if (b1.getDeviceId() == null && b2.getDeviceId() == null) {
                    iReturn = 0;
                } else if (b1.getDeviceId() != null && b2.getDeviceId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getDeviceId().compareTo(b2.getDeviceId());
                }
                break;
            case SubscriberManager.ID_FIREBASE_TOKEN_ID:
                if (b1.getFirebaseTokenId() == null && b2.getFirebaseTokenId() != null) {
                    iReturn = -1;
                } else if (b1.getFirebaseTokenId() == null && b2.getFirebaseTokenId() == null) {
                    iReturn = 0;
                } else if (b1.getFirebaseTokenId() != null && b2.getFirebaseTokenId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getFirebaseTokenId().compareTo(b2.getFirebaseTokenId());
                }
                break;
            case SubscriberManager.ID_NAME:
                if (b1.getName() == null && b2.getName() != null) {
                    iReturn = -1;
                } else if (b1.getName() == null && b2.getName() == null) {
                    iReturn = 0;
                } else if (b1.getName() != null && b2.getName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getName().compareTo(b2.getName());
                }
                break;
            case SubscriberManager.ID_MSISDN:
                if (b1.getMsisdn() == null && b2.getMsisdn() != null) {
                    iReturn = -1;
                } else if (b1.getMsisdn() == null && b2.getMsisdn() == null) {
                    iReturn = 0;
                } else if (b1.getMsisdn() != null && b2.getMsisdn() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMsisdn().compareTo(b2.getMsisdn());
                }
                break;
            case SubscriberManager.ID_SUBSCRIBER_ID:
                if (b1.getSubscriberId() == null && b2.getSubscriberId() != null) {
                    iReturn = -1;
                } else if (b1.getSubscriberId() == null && b2.getSubscriberId() == null) {
                    iReturn = 0;
                } else if (b1.getSubscriberId() != null && b2.getSubscriberId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSubscriberId().compareTo(b2.getSubscriberId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
