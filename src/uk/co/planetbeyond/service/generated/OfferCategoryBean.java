




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.service.manager.OfferCategoryManagerImpl;
import uk.co.planetbeyond.service.generated.GeneratedBean;


import uk.co.planetbeyond.service.generated.OfferOfTheDayBean;
import uk.co.planetbeyond.service.manager.OfferOfTheDayManagerImpl;



import uk.co.planetbeyond.service.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * OfferCategoryBean is a mapping of offer_category Table.
 * @author sql2java
*/
@Persistent
public class OfferCategoryBean extends BaseOfferCategoryBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8210916215915031034L;
	
    private boolean typeIsModified = false;
    private boolean typeIsInitialized = false;

    private boolean nameIsModified = false;
    private boolean nameIsInitialized = false;

    private boolean categoryIdIsModified = false;
    private boolean categoryIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a OfferCategoryBean is via the createOfferCategoryBean method in OfferCategoryManager or
     * via the factory class OfferCategoryFactory create method
     */
    public OfferCategoryBean()
    {
    }



    /**
     * Setter method for type.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to type
     */
    @Override
    public void setType(Integer newVal)
    {
        if ((newVal != null && type != null && (newVal.compareTo(type) == 0)) ||
            (newVal == null && type == null && typeIsInitialized)) {
            return;
        }
        type = newVal;
        typeIsModified = true;
        typeIsInitialized = true;
    }

    /**
     * Setter method for type.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to type
     */
    public void setType(int newVal)
    {
        setType(new Integer(newVal));
    }

    /**
     * Determines if the type has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTypeModified()
    {
        return typeIsModified;
    }

    /**
     * Manually set whether type has been modified or not.
     */
    public void isTypeModified(boolean value)
    {
        typeIsModified = value;
    }	

    /**
     * Determines if the type has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTypeInitialized()
    {
        return typeIsInitialized;
    }

    /**
     * Manually set whether type has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isTypeInitialized(boolean value)
    {
        typeIsInitialized = value;
    }



    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    @Override
    public void setName(String newVal)
    {
        if ((newVal != null && name != null && (newVal.compareTo(name) == 0)) ||
            (newVal == null && name == null && nameIsInitialized)) {
            return;
        }
        name = newVal;
        nameIsModified = true;
        nameIsInitialized = true;
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified()
    {
        return nameIsModified;
    }

    /**
     * Manually set whether name has been modified or not.
     */
    public void isNameModified(boolean value)
    {
        nameIsModified = value;
    }	

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized()
    {
        return nameIsInitialized;
    }

    /**
     * Manually set whether name has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isNameInitialized(boolean value)
    {
        nameIsInitialized = value;
    }



    /**
     * Setter method for categoryId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to categoryId
     */
    @Override
    public void setCategoryId(Integer newVal)
    {
        if ((newVal != null && categoryId != null && (newVal.compareTo(categoryId) == 0)) ||
            (newVal == null && categoryId == null && categoryIdIsInitialized)) {
            return;
        }
        categoryId = newVal;
        categoryIdIsModified = true;
        categoryIdIsInitialized = true;
    }

    /**
     * Setter method for categoryId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to categoryId
     */
    public void setCategoryId(int newVal)
    {
        setCategoryId(new Integer(newVal));
    }

    /**
     * Determines if the categoryId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCategoryIdModified()
    {
        return categoryIdIsModified;
    }

    /**
     * Manually set whether categoryId has been modified or not.
     */
    public void isCategoryIdModified(boolean value)
    {
        categoryIdIsModified = value;
    }	

    /**
     * Determines if the categoryId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCategoryIdInitialized()
    {
        return categoryIdIsInitialized;
    }

    /**
     * Manually set whether categoryId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCategoryIdInitialized(boolean value)
    {
        categoryIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return typeIsModified 		|| nameIsModified  		|| categoryIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        typeIsModified = isModified;
        nameIsModified = isModified;
        categoryIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(OfferCategoryBean bean)
    {
        setType(bean.getType());
        setName(bean.getName());
        setCategoryId(bean.getCategoryId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseOfferCategoryBean toBaseBean()
    {
	BaseOfferCategoryBean bean = new BaseOfferCategoryBean();
        bean.setType(getType());
        bean.setName(getName());
        bean.setCategoryId(getCategoryId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(OfferCategoryBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	typeIsModified = bean.isTypeModified();
  	typeIsInitialized= bean.isTypeInitialized();
	nameIsModified = bean.isNameModified();
  	nameIsInitialized= bean.isNameInitialized();
	categoryIdIsModified = bean.isCategoryIdModified();
  	categoryIdIsInitialized= bean.isCategoryIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("type", getType() == null ? "" : getType().toString());
        dictionnary.put("name", getName() == null ? "" : getName().toString());
        dictionnary.put("category_id", getCategoryId() == null ? "" : getCategoryId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("category_id", getCategoryId() == null ? "" : getCategoryId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("type".equalsIgnoreCase(column) || "type".equalsIgnoreCase(column)) {
            return getType() == null ? "" : getType().toString();
        } else if ("name".equalsIgnoreCase(column) || "name".equalsIgnoreCase(column)) {
            return getName() == null ? "" : getName().toString();
        } else if ("category_id".equalsIgnoreCase(column) || "categoryId".equalsIgnoreCase(column)) {
            return getCategoryId() == null ? "" : getCategoryId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof OfferCategoryBean)) {
			return false;
		}

		OfferCategoryBean obj = (OfferCategoryBean) object;
		return new EqualsBuilder()
            .append(getType(), obj.getType())
            .append(getName(), obj.getName())
            .append(getCategoryId(), obj.getCategoryId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getType())
            .append(getName())
            .append(getCategoryId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("type", getType())
            .append("name", getName())
            .append("category_id", getCategoryId())
            .toString();
	}


    public int compareTo(Object object)
    {
        OfferCategoryBean obj = (OfferCategoryBean) object;
        return new CompareToBuilder()
            .append(getType(), obj.getType())
            .append(getName(), obj.getName())
            .append(getCategoryId(), obj.getCategoryId())
            .toComparison();
   }



    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the OfferOfTheDayBean object from database where offer_category.category_id == offer_of_the_day.category_id
     *
     * @return the associated OfferOfTheDayBean bean
     * @throws DAOException
     */
    //3.0 GET IMPORTED
    public List<OfferOfTheDayBean> loadOfferOfTheDays() throws DAOException
    {
        OfferOfTheDayBean other = OfferOfTheDayManagerImpl.getInstance().createOfferOfTheDayBean();
        other.setCategoryId(getCategoryId());
        return OfferOfTheDayManagerImpl.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * Retrieves a single object of OfferOfTheDayBean from database where offer_category.category_id == offer_of_the_day.category_id
     *
     * @return the associated OfferOfTheDayBean bean
     * @throws DAOException
     */
    //3.0.1 GET IMPORTED
    public OfferOfTheDayBean loadSingleOfferOfTheDay() throws DAOException
    {
        List<OfferOfTheDayBean> list = loadOfferOfTheDays();
	
	if (list == null || list.size() == 0)
	{
		return null;
	}

	return list.get(0);
    }



    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the OfferCategoryBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public OfferCategoryBean save() throws DAOException
    {
        return OfferCategoryManagerImpl.getInstance().save(this);
    }

    /**
     * Update the OfferCategoryBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public OfferCategoryBean update() throws DAOException
    {
        return OfferCategoryManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the OfferCategoryBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public OfferCategoryBean insert() throws DAOException
    {
        return OfferCategoryManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of OfferCategoryBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return OfferCategoryManagerImpl.getInstance().createOfferCategoryBean();
    }

    /**
     * Creates and returns a new instance of OfferCategoryBean.
     *
     * @return
     */
    //15
    public static OfferCategoryBean newInstance()
    {
        return OfferCategoryManagerImpl.getInstance().createOfferCategoryBean();
    }

    /**
     * Returns manager class for OfferCategory
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return OfferCategoryManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. OfferCategory
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "offer_category";
    }



}
