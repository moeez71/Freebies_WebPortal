




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.service.manager.ClientManagerImpl;
import uk.co.planetbeyond.service.generated.GeneratedBean;


import uk.co.planetbeyond.service.generated.AdvertScheduleBean;
import uk.co.planetbeyond.service.manager.AdvertScheduleManagerImpl;



import uk.co.planetbeyond.service.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * ClientBean is a mapping of client Table.
 * @author sql2java
*/
@Persistent
public class ClientBean extends BaseClientBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8210916215915031034L;
	
    private boolean creationTimestampIsModified = false;
    private boolean creationTimestampIsInitialized = false;

    private boolean contactNumberIsModified = false;
    private boolean contactNumberIsInitialized = false;

    private boolean emailIsModified = false;
    private boolean emailIsInitialized = false;

    private boolean addressIsModified = false;
    private boolean addressIsInitialized = false;

    private boolean clientNameIsModified = false;
    private boolean clientNameIsInitialized = false;

    private boolean clientIdIsModified = false;
    private boolean clientIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ClientBean is via the createClientBean method in ClientManager or
     * via the factory class ClientFactory create method
     */
    public ClientBean()
    {
    }



    /**
     * Setter method for creationTimestamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    @Override
    public void setCreationTimestamp(java.util.Date newVal)
    {
        if ((newVal != null && creationTimestamp != null && (newVal.compareTo(creationTimestamp) == 0)) ||
            (newVal == null && creationTimestamp == null && creationTimestampIsInitialized)) {
            return;
        }
        creationTimestamp = newVal;
        creationTimestampIsModified = true;
        creationTimestampIsInitialized = true;
    }

    /**
     * Setter method for creationTimestamp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    public void setCreationTimestamp(long newVal)
    {
        setCreationTimestamp(new java.util.Date(newVal));
    }

    /**
     * Determines if the creationTimestamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreationTimestampModified()
    {
        return creationTimestampIsModified;
    }

    /**
     * Manually set whether creationTimestamp has been modified or not.
     */
    public void isCreationTimestampModified(boolean value)
    {
        creationTimestampIsModified = value;
    }	

    /**
     * Determines if the creationTimestamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreationTimestampInitialized()
    {
        return creationTimestampIsInitialized;
    }

    /**
     * Manually set whether creationTimestamp has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCreationTimestampInitialized(boolean value)
    {
        creationTimestampIsInitialized = value;
    }



    /**
     * Setter method for contactNumber.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contactNumber
     */
    @Override
    public void setContactNumber(String newVal)
    {
        if ((newVal != null && contactNumber != null && (newVal.compareTo(contactNumber) == 0)) ||
            (newVal == null && contactNumber == null && contactNumberIsInitialized)) {
            return;
        }
        contactNumber = newVal;
        contactNumberIsModified = true;
        contactNumberIsInitialized = true;
    }

    /**
     * Determines if the contactNumber has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContactNumberModified()
    {
        return contactNumberIsModified;
    }

    /**
     * Manually set whether contactNumber has been modified or not.
     */
    public void isContactNumberModified(boolean value)
    {
        contactNumberIsModified = value;
    }	

    /**
     * Determines if the contactNumber has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContactNumberInitialized()
    {
        return contactNumberIsInitialized;
    }

    /**
     * Manually set whether contactNumber has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isContactNumberInitialized(boolean value)
    {
        contactNumberIsInitialized = value;
    }



    /**
     * Setter method for email.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to email
     */
    @Override
    public void setEmail(String newVal)
    {
        if ((newVal != null && email != null && (newVal.compareTo(email) == 0)) ||
            (newVal == null && email == null && emailIsInitialized)) {
            return;
        }
        email = newVal;
        emailIsModified = true;
        emailIsInitialized = true;
    }

    /**
     * Determines if the email has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEmailModified()
    {
        return emailIsModified;
    }

    /**
     * Manually set whether email has been modified or not.
     */
    public void isEmailModified(boolean value)
    {
        emailIsModified = value;
    }	

    /**
     * Determines if the email has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEmailInitialized()
    {
        return emailIsInitialized;
    }

    /**
     * Manually set whether email has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isEmailInitialized(boolean value)
    {
        emailIsInitialized = value;
    }



    /**
     * Setter method for address.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to address
     */
    @Override
    public void setAddress(String newVal)
    {
        if ((newVal != null && address != null && (newVal.compareTo(address) == 0)) ||
            (newVal == null && address == null && addressIsInitialized)) {
            return;
        }
        address = newVal;
        addressIsModified = true;
        addressIsInitialized = true;
    }

    /**
     * Determines if the address has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAddressModified()
    {
        return addressIsModified;
    }

    /**
     * Manually set whether address has been modified or not.
     */
    public void isAddressModified(boolean value)
    {
        addressIsModified = value;
    }	

    /**
     * Determines if the address has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAddressInitialized()
    {
        return addressIsInitialized;
    }

    /**
     * Manually set whether address has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isAddressInitialized(boolean value)
    {
        addressIsInitialized = value;
    }



    /**
     * Setter method for clientName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to clientName
     */
    @Override
    public void setClientName(String newVal)
    {
        if ((newVal != null && clientName != null && (newVal.compareTo(clientName) == 0)) ||
            (newVal == null && clientName == null && clientNameIsInitialized)) {
            return;
        }
        clientName = newVal;
        clientNameIsModified = true;
        clientNameIsInitialized = true;
    }

    /**
     * Determines if the clientName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isClientNameModified()
    {
        return clientNameIsModified;
    }

    /**
     * Manually set whether clientName has been modified or not.
     */
    public void isClientNameModified(boolean value)
    {
        clientNameIsModified = value;
    }	

    /**
     * Determines if the clientName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isClientNameInitialized()
    {
        return clientNameIsInitialized;
    }

    /**
     * Manually set whether clientName has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isClientNameInitialized(boolean value)
    {
        clientNameIsInitialized = value;
    }



    /**
     * Setter method for clientId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to clientId
     */
    @Override
    public void setClientId(Integer newVal)
    {
        if ((newVal != null && clientId != null && (newVal.compareTo(clientId) == 0)) ||
            (newVal == null && clientId == null && clientIdIsInitialized)) {
            return;
        }
        clientId = newVal;
        clientIdIsModified = true;
        clientIdIsInitialized = true;
    }

    /**
     * Setter method for clientId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to clientId
     */
    public void setClientId(int newVal)
    {
        setClientId(new Integer(newVal));
    }

    /**
     * Determines if the clientId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isClientIdModified()
    {
        return clientIdIsModified;
    }

    /**
     * Manually set whether clientId has been modified or not.
     */
    public void isClientIdModified(boolean value)
    {
        clientIdIsModified = value;
    }	

    /**
     * Determines if the clientId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isClientIdInitialized()
    {
        return clientIdIsInitialized;
    }

    /**
     * Manually set whether clientId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isClientIdInitialized(boolean value)
    {
        clientIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return creationTimestampIsModified 		|| contactNumberIsModified  		|| emailIsModified  		|| addressIsModified  		|| clientNameIsModified  		|| clientIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        creationTimestampIsModified = isModified;
        contactNumberIsModified = isModified;
        emailIsModified = isModified;
        addressIsModified = isModified;
        clientNameIsModified = isModified;
        clientIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ClientBean bean)
    {
        setCreationTimestamp(bean.getCreationTimestamp());
        setContactNumber(bean.getContactNumber());
        setEmail(bean.getEmail());
        setAddress(bean.getAddress());
        setClientName(bean.getClientName());
        setClientId(bean.getClientId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseClientBean toBaseBean()
    {
	BaseClientBean bean = new BaseClientBean();
        bean.setCreationTimestamp(getCreationTimestamp());
        bean.setContactNumber(getContactNumber());
        bean.setEmail(getEmail());
        bean.setAddress(getAddress());
        bean.setClientName(getClientName());
        bean.setClientId(getClientId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(ClientBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	creationTimestampIsModified = bean.isCreationTimestampModified();
  	creationTimestampIsInitialized= bean.isCreationTimestampInitialized();
	contactNumberIsModified = bean.isContactNumberModified();
  	contactNumberIsInitialized= bean.isContactNumberInitialized();
	emailIsModified = bean.isEmailModified();
  	emailIsInitialized= bean.isEmailInitialized();
	addressIsModified = bean.isAddressModified();
  	addressIsInitialized= bean.isAddressInitialized();
	clientNameIsModified = bean.isClientNameModified();
  	clientNameIsInitialized= bean.isClientNameInitialized();
	clientIdIsModified = bean.isClientIdModified();
  	clientIdIsInitialized= bean.isClientIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("creation_timestamp", getCreationTimestamp() == null ? "" : getCreationTimestamp().toString());
        dictionnary.put("contact_number", getContactNumber() == null ? "" : getContactNumber().toString());
        dictionnary.put("email", getEmail() == null ? "" : getEmail().toString());
        dictionnary.put("address", getAddress() == null ? "" : getAddress().toString());
        dictionnary.put("client_name", getClientName() == null ? "" : getClientName().toString());
        dictionnary.put("client_id", getClientId() == null ? "" : getClientId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("client_id", getClientId() == null ? "" : getClientId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("creation_timestamp".equalsIgnoreCase(column) || "creationTimestamp".equalsIgnoreCase(column)) {
            return getCreationTimestamp() == null ? "" : getCreationTimestamp().toString();
        } else if ("contact_number".equalsIgnoreCase(column) || "contactNumber".equalsIgnoreCase(column)) {
            return getContactNumber() == null ? "" : getContactNumber().toString();
        } else if ("email".equalsIgnoreCase(column) || "email".equalsIgnoreCase(column)) {
            return getEmail() == null ? "" : getEmail().toString();
        } else if ("address".equalsIgnoreCase(column) || "address".equalsIgnoreCase(column)) {
            return getAddress() == null ? "" : getAddress().toString();
        } else if ("client_name".equalsIgnoreCase(column) || "clientName".equalsIgnoreCase(column)) {
            return getClientName() == null ? "" : getClientName().toString();
        } else if ("client_id".equalsIgnoreCase(column) || "clientId".equalsIgnoreCase(column)) {
            return getClientId() == null ? "" : getClientId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof ClientBean)) {
			return false;
		}

		ClientBean obj = (ClientBean) object;
		return new EqualsBuilder()
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getContactNumber(), obj.getContactNumber())
            .append(getEmail(), obj.getEmail())
            .append(getAddress(), obj.getAddress())
            .append(getClientName(), obj.getClientName())
            .append(getClientId(), obj.getClientId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getCreationTimestamp())
            .append(getContactNumber())
            .append(getEmail())
            .append(getAddress())
            .append(getClientName())
            .append(getClientId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("creation_timestamp", getCreationTimestamp())
            .append("contact_number", getContactNumber())
            .append("email", getEmail())
            .append("address", getAddress())
            .append("client_name", getClientName())
            .append("client_id", getClientId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ClientBean obj = (ClientBean) object;
        return new CompareToBuilder()
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getContactNumber(), obj.getContactNumber())
            .append(getEmail(), obj.getEmail())
            .append(getAddress(), obj.getAddress())
            .append(getClientName(), obj.getClientName())
            .append(getClientId(), obj.getClientId())
            .toComparison();
   }



    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the AdvertScheduleBean object from database where client.client_id == advert_schedule.client_id
     *
     * @return the associated AdvertScheduleBean bean
     * @throws DAOException
     */
    //3.0 GET IMPORTED
    public List<AdvertScheduleBean> loadAdvertSchedules() throws DAOException
    {
        AdvertScheduleBean other = AdvertScheduleManagerImpl.getInstance().createAdvertScheduleBean();
        other.setClientId(getClientId());
        return AdvertScheduleManagerImpl.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * Retrieves a single object of AdvertScheduleBean from database where client.client_id == advert_schedule.client_id
     *
     * @return the associated AdvertScheduleBean bean
     * @throws DAOException
     */
    //3.0.1 GET IMPORTED
    public AdvertScheduleBean loadSingleAdvertSchedule() throws DAOException
    {
        List<AdvertScheduleBean> list = loadAdvertSchedules();
	
	if (list == null || list.size() == 0)
	{
		return null;
	}

	return list.get(0);
    }



    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ClientBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ClientBean save() throws DAOException
    {
        return ClientManagerImpl.getInstance().save(this);
    }

    /**
     * Update the ClientBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ClientBean update() throws DAOException
    {
        return ClientManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the ClientBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public ClientBean insert() throws DAOException
    {
        return ClientManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of ClientBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return ClientManagerImpl.getInstance().createClientBean();
    }

    /**
     * Creates and returns a new instance of ClientBean.
     *
     * @return
     */
    //15
    public static ClientBean newInstance()
    {
        return ClientManagerImpl.getInstance().createClientBean();
    }

    /**
     * Returns manager class for Client
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return ClientManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. Client
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "client";
    }



}
