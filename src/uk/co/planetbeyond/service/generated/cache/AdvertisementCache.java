




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated.cache;

import java.util.HashMap;

import uk.co.planetbeyond.service.generated.exception.DAOException;
import uk.co.planetbeyond.service.generated.AdvertisementBean;
import uk.co.planetbeyond.service.manager.AdvertisementManagerImpl;

/**
 * This cache manager is based on code from Mark GRAND in "Patterns in Java,
 * Volume 1", Wiley.
 * 
 * @author afagot
 */
public final class AdvertisementCache 
{
	/**
	 * Unique instance of the cache manager.
	 */
	private static AdvertisementCache instance = new AdvertisementCache();

	/**
	 * Maximum number of AdvertisementBean objects that may be in the cache.
	 */
	private int maxCacheSize = 80;

	/**
	 * The number of AdvertisementBean objects currently in the cache.
	 */
	private int currentCacheSize = 0;

	/**
	 * We use a linked list to determine the least recently used bean. The cache
	 * is implemented by a HashMap object. The HashMap values are linked list
	 * objects that refer to the actual AdvertisementBean.
	 */
	private HashMap<Integer, LinkedList> cache = new HashMap<Integer, LinkedList>();

	/**
	 * This is the head of the linked list that refers to the most recently used
	 * AdvertisementBean.
	 */
	private LinkedList mru;

	/**
	 * This is the end of the linked list that refers to the least recently used
	 * AdvertisementBean.
	 */
	private LinkedList lru;
	
	/**
	* Object to make updates in this class sychronized
	*/
	private Object updateLock = new Object();
	
	/**
	 * In order to prevent the compiler from generating the default constructor.
	 */
	private AdvertisementCache() 
	{
	}

	/**
	* Max Number of entries that can be saved in the cache at a time
	*
	* @param maxCacheSize
	*/
	public void updateMaxCacheSize(int maxCacheSize)
	{
		this.maxCacheSize = maxCacheSize;
	}
	
	/**
	 * Return the unique instance of the class.
	 */
	public static AdvertisementCache getInstance() 
	{
		return instance;
	}

	/**
	 * A AdvertisementBean object is passed to this method for addition to the cache.
	 */
	public void addAdvertisement(AdvertisementBean bean) 
	{
		synchronized(updateLock)
		{ 
			Integer id = bean.getAdvertisementId();
			if (null == cache.get(id)) 
			{
	
				// bean not in the cache
				// add bean to the cache, making it the most recently used
				if (0 == currentCacheSize) 
				{
					// treat empty cache as a special case
					lru = mru = new LinkedList();
					mru.bean = bean;
				} 
				else 
				{
					LinkedList newLink;
					if (maxCacheSize < currentCacheSize) 
					{
						// remove the least recently used bean from the cache
						newLink = lru;
						lru = newLink.previous;
						cache.remove(newLink.bean.getAdvertisementId());
						lru.next = null;
					} 
					else 
					{
						newLink = new LinkedList();
						currentCacheSize++;
					}
					newLink.bean = bean;
					newLink.next = mru;
					newLink.previous = null;
					mru = newLink;
				}
				// put the now most recently used bean in the cache
				cache.put(id, mru);		
			} 
			else 
			{ 
				// bean already in the cache
				// addBid should not be called when the object is already in the
				// cache however since that happened do a fetch so that the object
				// becomes the most recently used
				fetchAdvertisement(id);
			}
		}
	}

	/**
	 * Return the AdvertisementBean associated with the given key.
	 */
	public AdvertisementBean fetchAdvertisement(Integer id) 
	{
		LinkedList foundLink = (LinkedList) cache.get(id);
		if (null == foundLink) 
		{
			AdvertisementBean bean = null;
			try 
			{
				bean = AdvertisementManagerImpl.getInstance().loadByPrimaryKey(id);
			} 
			catch (DAOException e) 
			{
				return null;
			}
			if (null != bean) 
			{
				addAdvertisement(bean);
			}
			return bean;
		}

		synchronized(updateLock)
		{
			// AFagot [2007-07-06]
			// this could be acheived with the now standard java.util.LinkedList and
			// java.util.ListIterator but the code was already written since 1998 ;-)
			if (mru != foundLink) 
			{
				if (null != foundLink.previous) 
				{
					foundLink.previous.next = foundLink.next;
				}
				if (null != foundLink.next) 
				{
					foundLink.next.previous = foundLink.previous;
				}
				foundLink.previous = null;
				foundLink.next = mru;
				mru = foundLink;
			}
		}

		return foundLink.bean;
	}

	/**
	 * Updates AdvertisementBean object in the cache.
	 */
	public void updateAdvertisement(AdvertisementBean bean) 
	{
		synchronized(updateLock)
		{
			// check if the given object is present in the cache
			if (isAdvertisementInCache(bean))  
			{
				Integer id = bean.getAdvertisementId();			
			
				// if found, update it
				cache.get(id).bean = bean;
			}
			else
			{
				// addAdvertisement(bean);
			}
		}
	}

	/**
	 * Removes all entries from the cache
	 */
	public void clearCache()
	{
		synchronized (updateLock)
		{
			cache.clear();
			currentCacheSize = 0;
			lru = mru = new LinkedList();
		}
	}

	/**
	 * Returns true if AdvertisementBean object is in the cache. FALSE otherwise
	 */
	public boolean isAdvertisementInCache(AdvertisementBean bean) 
	{
		Integer id = bean.getAdvertisementId();

		// check if the given object is present in the cache
		return cache.get(id) == null? false : true;
	}

	/**
	 * Private doubly linked list for managing list of most recently used beans.
	 */
	private class LinkedList 
	{
		AdvertisementBean bean;
		LinkedList previous;
		LinkedList next;
	}
}
