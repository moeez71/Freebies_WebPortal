




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.service.manager.PromoManagerImpl;
import uk.co.planetbeyond.service.generated.GeneratedBean;





import uk.co.planetbeyond.service.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * PromoBean is a mapping of promo Table.
 * @author sql2java
*/
@Persistent
public class PromoBean extends BasePromoBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8212568703426682458L;
	
    private boolean creationTimestampIsModified = false;
    private boolean creationTimestampIsInitialized = false;

    private boolean detailIsModified = false;
    private boolean detailIsInitialized = false;

    private boolean codeIsModified = false;
    private boolean codeIsInitialized = false;

    private boolean promoIdIsModified = false;
    private boolean promoIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a PromoBean is via the createPromoBean method in PromoManager or
     * via the factory class PromoFactory create method
     */
    public PromoBean()
    {
    }



    /**
     * Setter method for creationTimestamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    @Override
    public void setCreationTimestamp(java.util.Date newVal)
    {
        if ((newVal != null && creationTimestamp != null && (newVal.compareTo(creationTimestamp) == 0)) ||
            (newVal == null && creationTimestamp == null && creationTimestampIsInitialized)) {
            return;
        }
        creationTimestamp = newVal;
        creationTimestampIsModified = true;
        creationTimestampIsInitialized = true;
    }

    /**
     * Setter method for creationTimestamp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    public void setCreationTimestamp(long newVal)
    {
        setCreationTimestamp(new java.util.Date(newVal));
    }

    /**
     * Determines if the creationTimestamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreationTimestampModified()
    {
        return creationTimestampIsModified;
    }

    /**
     * Manually set whether creationTimestamp has been modified or not.
     */
    public void isCreationTimestampModified(boolean value)
    {
        creationTimestampIsModified = value;
    }	

    /**
     * Determines if the creationTimestamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreationTimestampInitialized()
    {
        return creationTimestampIsInitialized;
    }

    /**
     * Manually set whether creationTimestamp has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCreationTimestampInitialized(boolean value)
    {
        creationTimestampIsInitialized = value;
    }



    /**
     * Setter method for detail.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to detail
     */
    @Override
    public void setDetail(String newVal)
    {
        if ((newVal != null && detail != null && (newVal.compareTo(detail) == 0)) ||
            (newVal == null && detail == null && detailIsInitialized)) {
            return;
        }
        detail = newVal;
        detailIsModified = true;
        detailIsInitialized = true;
    }

    /**
     * Determines if the detail has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDetailModified()
    {
        return detailIsModified;
    }

    /**
     * Manually set whether detail has been modified or not.
     */
    public void isDetailModified(boolean value)
    {
        detailIsModified = value;
    }	

    /**
     * Determines if the detail has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDetailInitialized()
    {
        return detailIsInitialized;
    }

    /**
     * Manually set whether detail has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isDetailInitialized(boolean value)
    {
        detailIsInitialized = value;
    }



    /**
     * Setter method for code.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to code
     */
    @Override
    public void setCode(String newVal)
    {
        if ((newVal != null && code != null && (newVal.compareTo(code) == 0)) ||
            (newVal == null && code == null && codeIsInitialized)) {
            return;
        }
        code = newVal;
        codeIsModified = true;
        codeIsInitialized = true;
    }

    /**
     * Determines if the code has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodeModified()
    {
        return codeIsModified;
    }

    /**
     * Manually set whether code has been modified or not.
     */
    public void isCodeModified(boolean value)
    {
        codeIsModified = value;
    }	

    /**
     * Determines if the code has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodeInitialized()
    {
        return codeIsInitialized;
    }

    /**
     * Manually set whether code has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCodeInitialized(boolean value)
    {
        codeIsInitialized = value;
    }



    /**
     * Setter method for promoId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to promoId
     */
    @Override
    public void setPromoId(Integer newVal)
    {
        if ((newVal != null && promoId != null && (newVal.compareTo(promoId) == 0)) ||
            (newVal == null && promoId == null && promoIdIsInitialized)) {
            return;
        }
        promoId = newVal;
        promoIdIsModified = true;
        promoIdIsInitialized = true;
    }

    /**
     * Setter method for promoId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to promoId
     */
    public void setPromoId(int newVal)
    {
        setPromoId(new Integer(newVal));
    }

    /**
     * Determines if the promoId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPromoIdModified()
    {
        return promoIdIsModified;
    }

    /**
     * Manually set whether promoId has been modified or not.
     */
    public void isPromoIdModified(boolean value)
    {
        promoIdIsModified = value;
    }	

    /**
     * Determines if the promoId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPromoIdInitialized()
    {
        return promoIdIsInitialized;
    }

    /**
     * Manually set whether promoId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isPromoIdInitialized(boolean value)
    {
        promoIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return creationTimestampIsModified 		|| detailIsModified  		|| codeIsModified  		|| promoIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        creationTimestampIsModified = isModified;
        detailIsModified = isModified;
        codeIsModified = isModified;
        promoIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(PromoBean bean)
    {
        setCreationTimestamp(bean.getCreationTimestamp());
        setDetail(bean.getDetail());
        setCode(bean.getCode());
        setPromoId(bean.getPromoId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BasePromoBean toBaseBean()
    {
	BasePromoBean bean = new BasePromoBean();
        bean.setCreationTimestamp(getCreationTimestamp());
        bean.setDetail(getDetail());
        bean.setCode(getCode());
        bean.setPromoId(getPromoId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(PromoBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	creationTimestampIsModified = bean.isCreationTimestampModified();
  	creationTimestampIsInitialized= bean.isCreationTimestampInitialized();
	detailIsModified = bean.isDetailModified();
  	detailIsInitialized= bean.isDetailInitialized();
	codeIsModified = bean.isCodeModified();
  	codeIsInitialized= bean.isCodeInitialized();
	promoIdIsModified = bean.isPromoIdModified();
  	promoIdIsInitialized= bean.isPromoIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("creation_timestamp", getCreationTimestamp() == null ? "" : getCreationTimestamp().toString());
        dictionnary.put("detail", getDetail() == null ? "" : getDetail().toString());
        dictionnary.put("code", getCode() == null ? "" : getCode().toString());
        dictionnary.put("promo_id", getPromoId() == null ? "" : getPromoId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("promo_id", getPromoId() == null ? "" : getPromoId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("creation_timestamp".equalsIgnoreCase(column) || "creationTimestamp".equalsIgnoreCase(column)) {
            return getCreationTimestamp() == null ? "" : getCreationTimestamp().toString();
        } else if ("detail".equalsIgnoreCase(column) || "detail".equalsIgnoreCase(column)) {
            return getDetail() == null ? "" : getDetail().toString();
        } else if ("code".equalsIgnoreCase(column) || "code".equalsIgnoreCase(column)) {
            return getCode() == null ? "" : getCode().toString();
        } else if ("promo_id".equalsIgnoreCase(column) || "promoId".equalsIgnoreCase(column)) {
            return getPromoId() == null ? "" : getPromoId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof PromoBean)) {
			return false;
		}

		PromoBean obj = (PromoBean) object;
		return new EqualsBuilder()
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getDetail(), obj.getDetail())
            .append(getCode(), obj.getCode())
            .append(getPromoId(), obj.getPromoId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getCreationTimestamp())
            .append(getDetail())
            .append(getCode())
            .append(getPromoId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("creation_timestamp", getCreationTimestamp())
            .append("detail", getDetail())
            .append("code", getCode())
            .append("promo_id", getPromoId())
            .toString();
	}


    public int compareTo(Object object)
    {
        PromoBean obj = (PromoBean) object;
        return new CompareToBuilder()
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getDetail(), obj.getDetail())
            .append(getCode(), obj.getCode())
            .append(getPromoId(), obj.getPromoId())
            .toComparison();
   }






    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the PromoBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public PromoBean save() throws DAOException
    {
        return PromoManagerImpl.getInstance().save(this);
    }

    /**
     * Update the PromoBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public PromoBean update() throws DAOException
    {
        return PromoManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the PromoBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public PromoBean insert() throws DAOException
    {
        return PromoManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of PromoBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return PromoManagerImpl.getInstance().createPromoBean();
    }

    /**
     * Creates and returns a new instance of PromoBean.
     *
     * @return
     */
    //15
    public static PromoBean newInstance()
    {
        return PromoManagerImpl.getInstance().createPromoBean();
    }

    /**
     * Returns manager class for Promo
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return PromoManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. Promo
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "promo";
    }



}
