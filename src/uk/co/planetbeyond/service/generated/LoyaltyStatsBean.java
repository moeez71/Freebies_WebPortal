




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.service.manager.LoyaltyStatsManagerImpl;
import uk.co.planetbeyond.service.generated.GeneratedBean;





import uk.co.planetbeyond.service.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * LoyaltyStatsBean is a mapping of loyalty_stats Table.
 * @author sql2java
*/
@Persistent
public class LoyaltyStatsBean extends BaseLoyaltyStatsBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8210916215915031034L;
	
    private boolean lastUpdatedIsModified = false;
    private boolean lastUpdatedIsInitialized = false;

    private boolean pointsRemainingIsModified = false;
    private boolean pointsRemainingIsInitialized = false;

    private boolean pointsConsumedIsModified = false;
    private boolean pointsConsumedIsInitialized = false;

    private boolean totalPointsIsModified = false;
    private boolean totalPointsIsInitialized = false;

    private boolean loyaltyStatIdIsModified = false;
    private boolean loyaltyStatIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a LoyaltyStatsBean is via the createLoyaltyStatsBean method in LoyaltyStatsManager or
     * via the factory class LoyaltyStatsFactory create method
     */
    public LoyaltyStatsBean()
    {
    }



    /**
     * Setter method for lastUpdated.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lastUpdated
     */
    @Override
    public void setLastUpdated(java.util.Date newVal)
    {
        if ((newVal != null && lastUpdated != null && (newVal.compareTo(lastUpdated) == 0)) ||
            (newVal == null && lastUpdated == null && lastUpdatedIsInitialized)) {
            return;
        }
        lastUpdated = newVal;
        lastUpdatedIsModified = true;
        lastUpdatedIsInitialized = true;
    }

    /**
     * Setter method for lastUpdated.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to lastUpdated
     */
    public void setLastUpdated(long newVal)
    {
        setLastUpdated(new java.util.Date(newVal));
    }

    /**
     * Determines if the lastUpdated has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLastUpdatedModified()
    {
        return lastUpdatedIsModified;
    }

    /**
     * Manually set whether lastUpdated has been modified or not.
     */
    public void isLastUpdatedModified(boolean value)
    {
        lastUpdatedIsModified = value;
    }	

    /**
     * Determines if the lastUpdated has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLastUpdatedInitialized()
    {
        return lastUpdatedIsInitialized;
    }

    /**
     * Manually set whether lastUpdated has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isLastUpdatedInitialized(boolean value)
    {
        lastUpdatedIsInitialized = value;
    }



    /**
     * Setter method for pointsRemaining.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to pointsRemaining
     */
    @Override
    public void setPointsRemaining(Integer newVal)
    {
        if ((newVal != null && pointsRemaining != null && (newVal.compareTo(pointsRemaining) == 0)) ||
            (newVal == null && pointsRemaining == null && pointsRemainingIsInitialized)) {
            return;
        }
        pointsRemaining = newVal;
        pointsRemainingIsModified = true;
        pointsRemainingIsInitialized = true;
    }

    /**
     * Setter method for pointsRemaining.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to pointsRemaining
     */
    public void setPointsRemaining(int newVal)
    {
        setPointsRemaining(new Integer(newVal));
    }

    /**
     * Determines if the pointsRemaining has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPointsRemainingModified()
    {
        return pointsRemainingIsModified;
    }

    /**
     * Manually set whether pointsRemaining has been modified or not.
     */
    public void isPointsRemainingModified(boolean value)
    {
        pointsRemainingIsModified = value;
    }	

    /**
     * Determines if the pointsRemaining has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPointsRemainingInitialized()
    {
        return pointsRemainingIsInitialized;
    }

    /**
     * Manually set whether pointsRemaining has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isPointsRemainingInitialized(boolean value)
    {
        pointsRemainingIsInitialized = value;
    }



    /**
     * Setter method for pointsConsumed.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to pointsConsumed
     */
    @Override
    public void setPointsConsumed(Long newVal)
    {
        if ((newVal != null && pointsConsumed != null && (newVal.compareTo(pointsConsumed) == 0)) ||
            (newVal == null && pointsConsumed == null && pointsConsumedIsInitialized)) {
            return;
        }
        pointsConsumed = newVal;
        pointsConsumedIsModified = true;
        pointsConsumedIsInitialized = true;
    }

    /**
     * Setter method for pointsConsumed.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to pointsConsumed
     */
    public void setPointsConsumed(long newVal)
    {
        setPointsConsumed(new Long(newVal));
    }

    /**
     * Determines if the pointsConsumed has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPointsConsumedModified()
    {
        return pointsConsumedIsModified;
    }

    /**
     * Manually set whether pointsConsumed has been modified or not.
     */
    public void isPointsConsumedModified(boolean value)
    {
        pointsConsumedIsModified = value;
    }	

    /**
     * Determines if the pointsConsumed has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPointsConsumedInitialized()
    {
        return pointsConsumedIsInitialized;
    }

    /**
     * Manually set whether pointsConsumed has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isPointsConsumedInitialized(boolean value)
    {
        pointsConsumedIsInitialized = value;
    }



    /**
     * Setter method for totalPoints.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to totalPoints
     */
    @Override
    public void setTotalPoints(Integer newVal)
    {
        if ((newVal != null && totalPoints != null && (newVal.compareTo(totalPoints) == 0)) ||
            (newVal == null && totalPoints == null && totalPointsIsInitialized)) {
            return;
        }
        totalPoints = newVal;
        totalPointsIsModified = true;
        totalPointsIsInitialized = true;
    }

    /**
     * Setter method for totalPoints.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to totalPoints
     */
    public void setTotalPoints(int newVal)
    {
        setTotalPoints(new Integer(newVal));
    }

    /**
     * Determines if the totalPoints has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTotalPointsModified()
    {
        return totalPointsIsModified;
    }

    /**
     * Manually set whether totalPoints has been modified or not.
     */
    public void isTotalPointsModified(boolean value)
    {
        totalPointsIsModified = value;
    }	

    /**
     * Determines if the totalPoints has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTotalPointsInitialized()
    {
        return totalPointsIsInitialized;
    }

    /**
     * Manually set whether totalPoints has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isTotalPointsInitialized(boolean value)
    {
        totalPointsIsInitialized = value;
    }



    /**
     * Setter method for loyaltyStatId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to loyaltyStatId
     */
    @Override
    public void setLoyaltyStatId(Integer newVal)
    {
        if ((newVal != null && loyaltyStatId != null && (newVal.compareTo(loyaltyStatId) == 0)) ||
            (newVal == null && loyaltyStatId == null && loyaltyStatIdIsInitialized)) {
            return;
        }
        loyaltyStatId = newVal;
        loyaltyStatIdIsModified = true;
        loyaltyStatIdIsInitialized = true;
    }

    /**
     * Setter method for loyaltyStatId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to loyaltyStatId
     */
    public void setLoyaltyStatId(int newVal)
    {
        setLoyaltyStatId(new Integer(newVal));
    }

    /**
     * Determines if the loyaltyStatId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLoyaltyStatIdModified()
    {
        return loyaltyStatIdIsModified;
    }

    /**
     * Manually set whether loyaltyStatId has been modified or not.
     */
    public void isLoyaltyStatIdModified(boolean value)
    {
        loyaltyStatIdIsModified = value;
    }	

    /**
     * Determines if the loyaltyStatId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLoyaltyStatIdInitialized()
    {
        return loyaltyStatIdIsInitialized;
    }

    /**
     * Manually set whether loyaltyStatId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isLoyaltyStatIdInitialized(boolean value)
    {
        loyaltyStatIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return lastUpdatedIsModified 		|| pointsRemainingIsModified  		|| pointsConsumedIsModified  		|| totalPointsIsModified  		|| loyaltyStatIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        lastUpdatedIsModified = isModified;
        pointsRemainingIsModified = isModified;
        pointsConsumedIsModified = isModified;
        totalPointsIsModified = isModified;
        loyaltyStatIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(LoyaltyStatsBean bean)
    {
        setLastUpdated(bean.getLastUpdated());
        setPointsRemaining(bean.getPointsRemaining());
        setPointsConsumed(bean.getPointsConsumed());
        setTotalPoints(bean.getTotalPoints());
        setLoyaltyStatId(bean.getLoyaltyStatId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseLoyaltyStatsBean toBaseBean()
    {
	BaseLoyaltyStatsBean bean = new BaseLoyaltyStatsBean();
        bean.setLastUpdated(getLastUpdated());
        bean.setPointsRemaining(getPointsRemaining());
        bean.setPointsConsumed(getPointsConsumed());
        bean.setTotalPoints(getTotalPoints());
        bean.setLoyaltyStatId(getLoyaltyStatId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(LoyaltyStatsBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	lastUpdatedIsModified = bean.isLastUpdatedModified();
  	lastUpdatedIsInitialized= bean.isLastUpdatedInitialized();
	pointsRemainingIsModified = bean.isPointsRemainingModified();
  	pointsRemainingIsInitialized= bean.isPointsRemainingInitialized();
	pointsConsumedIsModified = bean.isPointsConsumedModified();
  	pointsConsumedIsInitialized= bean.isPointsConsumedInitialized();
	totalPointsIsModified = bean.isTotalPointsModified();
  	totalPointsIsInitialized= bean.isTotalPointsInitialized();
	loyaltyStatIdIsModified = bean.isLoyaltyStatIdModified();
  	loyaltyStatIdIsInitialized= bean.isLoyaltyStatIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("last_updated", getLastUpdated() == null ? "" : getLastUpdated().toString());
        dictionnary.put("points_remaining", getPointsRemaining() == null ? "" : getPointsRemaining().toString());
        dictionnary.put("points_consumed", getPointsConsumed() == null ? "" : getPointsConsumed().toString());
        dictionnary.put("total_points", getTotalPoints() == null ? "" : getTotalPoints().toString());
        dictionnary.put("loyalty_stat_id", getLoyaltyStatId() == null ? "" : getLoyaltyStatId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("loyalty_stat_id", getLoyaltyStatId() == null ? "" : getLoyaltyStatId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("last_updated".equalsIgnoreCase(column) || "lastUpdated".equalsIgnoreCase(column)) {
            return getLastUpdated() == null ? "" : getLastUpdated().toString();
        } else if ("points_remaining".equalsIgnoreCase(column) || "pointsRemaining".equalsIgnoreCase(column)) {
            return getPointsRemaining() == null ? "" : getPointsRemaining().toString();
        } else if ("points_consumed".equalsIgnoreCase(column) || "pointsConsumed".equalsIgnoreCase(column)) {
            return getPointsConsumed() == null ? "" : getPointsConsumed().toString();
        } else if ("total_points".equalsIgnoreCase(column) || "totalPoints".equalsIgnoreCase(column)) {
            return getTotalPoints() == null ? "" : getTotalPoints().toString();
        } else if ("loyalty_stat_id".equalsIgnoreCase(column) || "loyaltyStatId".equalsIgnoreCase(column)) {
            return getLoyaltyStatId() == null ? "" : getLoyaltyStatId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof LoyaltyStatsBean)) {
			return false;
		}

		LoyaltyStatsBean obj = (LoyaltyStatsBean) object;
		return new EqualsBuilder()
            .append(getLastUpdated(), obj.getLastUpdated())
            .append(getPointsRemaining(), obj.getPointsRemaining())
            .append(getPointsConsumed(), obj.getPointsConsumed())
            .append(getTotalPoints(), obj.getTotalPoints())
            .append(getLoyaltyStatId(), obj.getLoyaltyStatId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getLastUpdated())
            .append(getPointsRemaining())
            .append(getPointsConsumed())
            .append(getTotalPoints())
            .append(getLoyaltyStatId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("last_updated", getLastUpdated())
            .append("points_remaining", getPointsRemaining())
            .append("points_consumed", getPointsConsumed())
            .append("total_points", getTotalPoints())
            .append("loyalty_stat_id", getLoyaltyStatId())
            .toString();
	}


    public int compareTo(Object object)
    {
        LoyaltyStatsBean obj = (LoyaltyStatsBean) object;
        return new CompareToBuilder()
            .append(getLastUpdated(), obj.getLastUpdated())
            .append(getPointsRemaining(), obj.getPointsRemaining())
            .append(getPointsConsumed(), obj.getPointsConsumed())
            .append(getTotalPoints(), obj.getTotalPoints())
            .append(getLoyaltyStatId(), obj.getLoyaltyStatId())
            .toComparison();
   }






    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the LoyaltyStatsBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public LoyaltyStatsBean save() throws DAOException
    {
        return LoyaltyStatsManagerImpl.getInstance().save(this);
    }

    /**
     * Update the LoyaltyStatsBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public LoyaltyStatsBean update() throws DAOException
    {
        return LoyaltyStatsManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the LoyaltyStatsBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public LoyaltyStatsBean insert() throws DAOException
    {
        return LoyaltyStatsManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of LoyaltyStatsBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return LoyaltyStatsManagerImpl.getInstance().createLoyaltyStatsBean();
    }

    /**
     * Creates and returns a new instance of LoyaltyStatsBean.
     *
     * @return
     */
    //15
    public static LoyaltyStatsBean newInstance()
    {
        return LoyaltyStatsManagerImpl.getInstance().createLoyaltyStatsBean();
    }

    /**
     * Returns manager class for LoyaltyStats
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return LoyaltyStatsManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. LoyaltyStats
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "loyalty_stats";
    }



}
