




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.service.manager.OfferOfTheDayManagerImpl;
import uk.co.planetbeyond.service.generated.GeneratedBean;

import uk.co.planetbeyond.service.generated.cache.OfferCategoryCache;

import uk.co.planetbeyond.service.generated.OfferCategoryBean;
import uk.co.planetbeyond.service.manager.OfferCategoryManagerImpl;



import uk.co.planetbeyond.service.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * OfferOfTheDayBean is a mapping of offer_of_the_day Table.
 * @author sql2java
*/
@Persistent
public class OfferOfTheDayBean extends BaseOfferOfTheDayBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8210916215915031034L;
	
    private boolean categoryIdIsModified = false;
    private boolean categoryIdIsInitialized = false;

    private boolean detailIsModified = false;
    private boolean detailIsInitialized = false;

    private boolean creationTimestampIsModified = false;
    private boolean creationTimestampIsInitialized = false;

    private boolean scheduledTimeIsModified = false;
    private boolean scheduledTimeIsInitialized = false;

    private boolean nameIsModified = false;
    private boolean nameIsInitialized = false;

    private boolean offerIdIsModified = false;
    private boolean offerIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a OfferOfTheDayBean is via the createOfferOfTheDayBean method in OfferOfTheDayManager or
     * via the factory class OfferOfTheDayFactory create method
     */
    public OfferOfTheDayBean()
    {
    }



    /**
     * Setter method for categoryId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to categoryId
     */
    @Override
    public void setCategoryId(Integer newVal)
    {
        if ((newVal != null && categoryId != null && (newVal.compareTo(categoryId) == 0)) ||
            (newVal == null && categoryId == null && categoryIdIsInitialized)) {
            return;
        }
        categoryId = newVal;
        categoryIdIsModified = true;
        categoryIdIsInitialized = true;
    }

    /**
     * Setter method for categoryId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to categoryId
     */
    public void setCategoryId(int newVal)
    {
        setCategoryId(new Integer(newVal));
    }

    /**
     * Determines if the categoryId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCategoryIdModified()
    {
        return categoryIdIsModified;
    }

    /**
     * Manually set whether categoryId has been modified or not.
     */
    public void isCategoryIdModified(boolean value)
    {
        categoryIdIsModified = value;
    }	

    /**
     * Determines if the categoryId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCategoryIdInitialized()
    {
        return categoryIdIsInitialized;
    }

    /**
     * Manually set whether categoryId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCategoryIdInitialized(boolean value)
    {
        categoryIdIsInitialized = value;
    }



    /**
     * Setter method for detail.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to detail
     */
    @Override
    public void setDetail(String newVal)
    {
        if ((newVal != null && detail != null && (newVal.compareTo(detail) == 0)) ||
            (newVal == null && detail == null && detailIsInitialized)) {
            return;
        }
        detail = newVal;
        detailIsModified = true;
        detailIsInitialized = true;
    }

    /**
     * Determines if the detail has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDetailModified()
    {
        return detailIsModified;
    }

    /**
     * Manually set whether detail has been modified or not.
     */
    public void isDetailModified(boolean value)
    {
        detailIsModified = value;
    }	

    /**
     * Determines if the detail has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDetailInitialized()
    {
        return detailIsInitialized;
    }

    /**
     * Manually set whether detail has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isDetailInitialized(boolean value)
    {
        detailIsInitialized = value;
    }



    /**
     * Setter method for creationTimestamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    @Override
    public void setCreationTimestamp(java.util.Date newVal)
    {
        if ((newVal != null && creationTimestamp != null && (newVal.compareTo(creationTimestamp) == 0)) ||
            (newVal == null && creationTimestamp == null && creationTimestampIsInitialized)) {
            return;
        }
        creationTimestamp = newVal;
        creationTimestampIsModified = true;
        creationTimestampIsInitialized = true;
    }

    /**
     * Setter method for creationTimestamp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    public void setCreationTimestamp(long newVal)
    {
        setCreationTimestamp(new java.util.Date(newVal));
    }

    /**
     * Determines if the creationTimestamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreationTimestampModified()
    {
        return creationTimestampIsModified;
    }

    /**
     * Manually set whether creationTimestamp has been modified or not.
     */
    public void isCreationTimestampModified(boolean value)
    {
        creationTimestampIsModified = value;
    }	

    /**
     * Determines if the creationTimestamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreationTimestampInitialized()
    {
        return creationTimestampIsInitialized;
    }

    /**
     * Manually set whether creationTimestamp has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCreationTimestampInitialized(boolean value)
    {
        creationTimestampIsInitialized = value;
    }



    /**
     * Setter method for scheduledTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to scheduledTime
     */
    @Override
    public void setScheduledTime(java.util.Date newVal)
    {
        if ((newVal != null && scheduledTime != null && (newVal.compareTo(scheduledTime) == 0)) ||
            (newVal == null && scheduledTime == null && scheduledTimeIsInitialized)) {
            return;
        }
        scheduledTime = newVal;
        scheduledTimeIsModified = true;
        scheduledTimeIsInitialized = true;
    }

    /**
     * Setter method for scheduledTime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to scheduledTime
     */
    public void setScheduledTime(long newVal)
    {
        setScheduledTime(new java.util.Date(newVal));
    }

    /**
     * Determines if the scheduledTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isScheduledTimeModified()
    {
        return scheduledTimeIsModified;
    }

    /**
     * Manually set whether scheduledTime has been modified or not.
     */
    public void isScheduledTimeModified(boolean value)
    {
        scheduledTimeIsModified = value;
    }	

    /**
     * Determines if the scheduledTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isScheduledTimeInitialized()
    {
        return scheduledTimeIsInitialized;
    }

    /**
     * Manually set whether scheduledTime has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isScheduledTimeInitialized(boolean value)
    {
        scheduledTimeIsInitialized = value;
    }



    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    @Override
    public void setName(String newVal)
    {
        if ((newVal != null && name != null && (newVal.compareTo(name) == 0)) ||
            (newVal == null && name == null && nameIsInitialized)) {
            return;
        }
        name = newVal;
        nameIsModified = true;
        nameIsInitialized = true;
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified()
    {
        return nameIsModified;
    }

    /**
     * Manually set whether name has been modified or not.
     */
    public void isNameModified(boolean value)
    {
        nameIsModified = value;
    }	

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized()
    {
        return nameIsInitialized;
    }

    /**
     * Manually set whether name has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isNameInitialized(boolean value)
    {
        nameIsInitialized = value;
    }



    /**
     * Setter method for offerId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to offerId
     */
    @Override
    public void setOfferId(Integer newVal)
    {
        if ((newVal != null && offerId != null && (newVal.compareTo(offerId) == 0)) ||
            (newVal == null && offerId == null && offerIdIsInitialized)) {
            return;
        }
        offerId = newVal;
        offerIdIsModified = true;
        offerIdIsInitialized = true;
    }

    /**
     * Setter method for offerId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to offerId
     */
    public void setOfferId(int newVal)
    {
        setOfferId(new Integer(newVal));
    }

    /**
     * Determines if the offerId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOfferIdModified()
    {
        return offerIdIsModified;
    }

    /**
     * Manually set whether offerId has been modified or not.
     */
    public void isOfferIdModified(boolean value)
    {
        offerIdIsModified = value;
    }	

    /**
     * Determines if the offerId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOfferIdInitialized()
    {
        return offerIdIsInitialized;
    }

    /**
     * Manually set whether offerId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isOfferIdInitialized(boolean value)
    {
        offerIdIsInitialized = value;
    }

    /** The OfferCategory referenced by this bean. */
    private OfferCategoryBean referencedOfferCategory;
    /** Getter method for OfferCategoryBean. */
    public OfferCategoryBean getOfferCategoryBean() {
        return this.referencedOfferCategory;
    }
    /** Setter method for OfferCategoryBean. */
    public void setOfferCategoryBean(OfferCategoryBean reference) {
        this.referencedOfferCategory = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return categoryIdIsModified 		|| detailIsModified  		|| creationTimestampIsModified  		|| scheduledTimeIsModified  		|| nameIsModified  		|| offerIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        categoryIdIsModified = isModified;
        detailIsModified = isModified;
        creationTimestampIsModified = isModified;
        scheduledTimeIsModified = isModified;
        nameIsModified = isModified;
        offerIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(OfferOfTheDayBean bean)
    {
        setCategoryId(bean.getCategoryId());
        setDetail(bean.getDetail());
        setCreationTimestamp(bean.getCreationTimestamp());
        setScheduledTime(bean.getScheduledTime());
        setName(bean.getName());
        setOfferId(bean.getOfferId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseOfferOfTheDayBean toBaseBean()
    {
	BaseOfferOfTheDayBean bean = new BaseOfferOfTheDayBean();
        bean.setCategoryId(getCategoryId());
        bean.setDetail(getDetail());
        bean.setCreationTimestamp(getCreationTimestamp());
        bean.setScheduledTime(getScheduledTime());
        bean.setName(getName());
        bean.setOfferId(getOfferId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(OfferOfTheDayBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	categoryIdIsModified = bean.isCategoryIdModified();
  	categoryIdIsInitialized= bean.isCategoryIdInitialized();
	detailIsModified = bean.isDetailModified();
  	detailIsInitialized= bean.isDetailInitialized();
	creationTimestampIsModified = bean.isCreationTimestampModified();
  	creationTimestampIsInitialized= bean.isCreationTimestampInitialized();
	scheduledTimeIsModified = bean.isScheduledTimeModified();
  	scheduledTimeIsInitialized= bean.isScheduledTimeInitialized();
	nameIsModified = bean.isNameModified();
  	nameIsInitialized= bean.isNameInitialized();
	offerIdIsModified = bean.isOfferIdModified();
  	offerIdIsInitialized= bean.isOfferIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("category_id", getCategoryId() == null ? "" : getCategoryId().toString());
        dictionnary.put("detail", getDetail() == null ? "" : getDetail().toString());
        dictionnary.put("creation_timestamp", getCreationTimestamp() == null ? "" : getCreationTimestamp().toString());
        dictionnary.put("scheduled_time", getScheduledTime() == null ? "" : getScheduledTime().toString());
        dictionnary.put("name", getName() == null ? "" : getName().toString());
        dictionnary.put("offer_id", getOfferId() == null ? "" : getOfferId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("offer_id", getOfferId() == null ? "" : getOfferId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("category_id".equalsIgnoreCase(column) || "categoryId".equalsIgnoreCase(column)) {
            return getCategoryId() == null ? "" : getCategoryId().toString();
        } else if ("detail".equalsIgnoreCase(column) || "detail".equalsIgnoreCase(column)) {
            return getDetail() == null ? "" : getDetail().toString();
        } else if ("creation_timestamp".equalsIgnoreCase(column) || "creationTimestamp".equalsIgnoreCase(column)) {
            return getCreationTimestamp() == null ? "" : getCreationTimestamp().toString();
        } else if ("scheduled_time".equalsIgnoreCase(column) || "scheduledTime".equalsIgnoreCase(column)) {
            return getScheduledTime() == null ? "" : getScheduledTime().toString();
        } else if ("name".equalsIgnoreCase(column) || "name".equalsIgnoreCase(column)) {
            return getName() == null ? "" : getName().toString();
        } else if ("offer_id".equalsIgnoreCase(column) || "offerId".equalsIgnoreCase(column)) {
            return getOfferId() == null ? "" : getOfferId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof OfferOfTheDayBean)) {
			return false;
		}

		OfferOfTheDayBean obj = (OfferOfTheDayBean) object;
		return new EqualsBuilder()
            .append(getCategoryId(), obj.getCategoryId())
            .append(getDetail(), obj.getDetail())
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getScheduledTime(), obj.getScheduledTime())
            .append(getName(), obj.getName())
            .append(getOfferId(), obj.getOfferId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getCategoryId())
            .append(getDetail())
            .append(getCreationTimestamp())
            .append(getScheduledTime())
            .append(getName())
            .append(getOfferId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("category_id", getCategoryId())
            .append("detail", getDetail())
            .append("creation_timestamp", getCreationTimestamp())
            .append("scheduled_time", getScheduledTime())
            .append("name", getName())
            .append("offer_id", getOfferId())
            .toString();
	}


    public int compareTo(Object object)
    {
        OfferOfTheDayBean obj = (OfferOfTheDayBean) object;
        return new CompareToBuilder()
            .append(getCategoryId(), obj.getCategoryId())
            .append(getDetail(), obj.getDetail())
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getScheduledTime(), obj.getScheduledTime())
            .append(getName(), obj.getName())
            .append(getOfferId(), obj.getOfferId())
            .toComparison();
   }






    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the OfferCategoryBean object from database where offer_of_the_day.category_id == offer_category.category_id
     *
     * @return the associated OfferCategoryBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED VALUES
    public OfferCategoryBean loadOfferCategory() throws DAOException
    {
        OfferCategoryBean other = OfferCategoryManagerImpl.getInstance().createOfferCategoryBean();
        other.setCategoryId(getCategoryId()); 
        setOfferCategoryBean(OfferCategoryManagerImpl.getInstance().loadUniqueUsingTemplate(other)); 
        return getOfferCategoryBean();
    }





    /**
     * Retrieves and stores (if not already present) the OfferCategoryBean object from the cache where offer_of_the_day.category_id == offer_category.category_id
     *
     * @return the associated OfferCategoryBean bean
     * @throws DAOException
     */
    //3.4 GET IMPORTED VALUES
    public OfferCategoryBean loadOfferCategoryFromCache() throws DAOException
    {
        return OfferCategoryCache.getInstance().fetchOfferCategory(getCategoryId());
    }



    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the OfferOfTheDayBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public OfferOfTheDayBean save() throws DAOException
    {
        return OfferOfTheDayManagerImpl.getInstance().save(this);
    }

    /**
     * Update the OfferOfTheDayBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public OfferOfTheDayBean update() throws DAOException
    {
        return OfferOfTheDayManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the OfferOfTheDayBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public OfferOfTheDayBean insert() throws DAOException
    {
        return OfferOfTheDayManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of OfferOfTheDayBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return OfferOfTheDayManagerImpl.getInstance().createOfferOfTheDayBean();
    }

    /**
     * Creates and returns a new instance of OfferOfTheDayBean.
     *
     * @return
     */
    //15
    public static OfferOfTheDayBean newInstance()
    {
        return OfferOfTheDayManagerImpl.getInstance().createOfferOfTheDayBean();
    }

    /**
     * Returns manager class for OfferOfTheDay
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return OfferOfTheDayManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. OfferOfTheDay
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "offer_of_the_day";
    }



}
