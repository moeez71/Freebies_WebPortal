




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import uk.co.planetbeyond.service.generated.Manager;
import uk.co.planetbeyond.service.generated.exception.DAOException;
import uk.co.planetbeyond.service.generated.exception.DataAccessException;
import uk.co.planetbeyond.service.generated.exception.ObjectRetrievalException;
import uk.co.planetbeyond.service.generated.listener.LoyaltyStatsListener;

/**
 * Handles database calls (save, load, count, etc...) for the loyalty_stats table.
 * @author sql2java
 */
public class LoyaltyStatsManager extends BaseGeneratedManager
{
    private static Logger log = LoggerFactory.getLogger(LoyaltyStatsManager.class);	

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the last_updated field.
     */
    public static final int ID_LAST_UPDATED = 0;

    /**
     * Identify the points_remaining field.
     */
    public static final int ID_POINTS_REMAINING = 1;

    /**
     * Identify the points_consumed field.
     */
    public static final int ID_POINTS_CONSUMED = 2;

    /**
     * Identify the total_points field.
     */
    public static final int ID_TOTAL_POINTS = 3;

    /**
     * Identify the loyalty_stat_id field.
     */
    public static final int ID_LOYALTY_STAT_ID = 4;


    /**
     * Name of last_updated field in the database along with table name.
     */
    public static final String FULL_FIELD_LAST_UPDATED = "loyalty_stats.last_updated";

    /**
     * Name of points_remaining field in the database along with table name.
     */
    public static final String FULL_FIELD_POINTS_REMAINING = "loyalty_stats.points_remaining";

    /**
     * Name of points_consumed field in the database along with table name.
     */
    public static final String FULL_FIELD_POINTS_CONSUMED = "loyalty_stats.points_consumed";

    /**
     * Name of total_points field in the database along with table name.
     */
    public static final String FULL_FIELD_TOTAL_POINTS = "loyalty_stats.total_points";

    /**
     * Name of loyalty_stat_id field in the database along with table name.
     */
    public static final String FULL_FIELD_LOYALTY_STAT_ID = "loyalty_stats.loyalty_stat_id";


    /**
     * Name of last_updated field in the database.
     */
    public static final String FIELD_LAST_UPDATED = "last_updated";

    /**
     * Name of points_remaining field in the database.
     */
    public static final String FIELD_POINTS_REMAINING = "points_remaining";

    /**
     * Name of points_consumed field in the database.
     */
    public static final String FIELD_POINTS_CONSUMED = "points_consumed";

    /**
     * Name of total_points field in the database.
     */
    public static final String FIELD_TOTAL_POINTS = "total_points";

    /**
     * Name of loyalty_stat_id field in the database.
     */
    public static final String FIELD_LOYALTY_STAT_ID = "loyalty_stat_id";


    /**
     * Contains all the full fields of the loyalty_stats table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "loyalty_stats.last_updated"
        ,"loyalty_stats.points_remaining"
        ,"loyalty_stats.points_consumed"
        ,"loyalty_stats.total_points"
        ,"loyalty_stats.loyalty_stat_id"
    };

    /**
     * Contains all the fields of the loyalty_stats table.
     */
    public static final String[] FIELD_NAMES =
    {
        "last_updated"
        ,"points_remaining"
        ,"points_consumed"
        ,"total_points"
        ,"loyalty_stat_id"
    };

    /**
     * Total number of fields (columns) in loyalty_stats table.
     */
    public static final int NUMBER_OF_FIELDS = FIELD_NAMES.length;	

    /**
     * Field that contains the comma separated fields of the loyalty_stats table.
     */
    public static final String ALL_FULL_FIELDS = "loyalty_stats.last_updated"
                            + ",loyalty_stats.points_remaining"
                            + ",loyalty_stats.points_consumed"
                            + ",loyalty_stats.total_points"
                            + ",loyalty_stats.loyalty_stat_id";

    /**
     * Field that contains the comma separated fields of the loyalty_stats table.
     */
    public static final String ALL_FIELDS = "last_updated"
                            + ",points_remaining"
                            + ",points_consumed"
                            + ",total_points"
                            + ",loyalty_stat_id";

    private static LoyaltyStatsManager singleton = new LoyaltyStatsManager();

    /**
    * Protected constructor to make this class singleton
    */
    protected LoyaltyStatsManager()
    {
    	super();
    }
    
    /**
     * Get the LoyaltyStatsManager singleton.
     *
     * @return LoyaltyStatsManager
     */
    public static LoyaltyStatsManager getInstance()
    {
        return singleton;
    }
    
    /**
     * Set the LoyaltyStatsManager singleton instance. This function can be used if this class needs to be extended
     */
    protected static void setInstance(LoyaltyStatsManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new LoyaltyStatsBean instance.
     *
     * @return the new LoyaltyStatsBean
     */
    public LoyaltyStatsBean createLoyaltyStatsBean()
    {
        return new LoyaltyStatsBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a LoyaltyStatsBean from the loyalty_stats using its key fields.
     *
     * @param loyaltyStatId Integer - PK# 1
     * @return a unique LoyaltyStatsBean
     * @throws DAOException
     */
    //1
    public LoyaltyStatsBean loadByPrimaryKey(Integer loyaltyStatId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
		
	    log.trace("Executing SQL --> SELECT {} FROM loyalty_stats WHERE loyalty_stat_id=?", ALL_FIELDS);

            StringBuilder sql = new StringBuilder("SELECT " + ALL_FIELDS + " FROM loyalty_stats WHERE loyalty_stat_id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (loyaltyStatId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, loyaltyStatId); }
	    log.trace("Params: {}",  loyaltyStatId);	
            List<LoyaltyStatsBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (pReturn.size() == 0) {
                return null;
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @param loyaltyStatId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer loyaltyStatId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();

	    log.trace("Executing SQL --> DELETE FROM loyalty_stats WHERE loyalty_stat_id=?");

            StringBuilder sql = new StringBuilder("DELETE FROM loyalty_stats WHERE loyalty_stat_id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (loyaltyStatId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, loyaltyStatId); }
	    log.trace("Params: {}",  loyaltyStatId);
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from loyalty_stats.
     *
     * @return an array of LoyaltyStatsManager bean
     * @throws DAOException
     */
    //5
    public LoyaltyStatsBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }

    /**
     * Loads all the rows from loyalty_stats.
     *
     * @return a list of LoyaltyStatsManager bean
     * @throws DAOException
     */
    //5
    public List<LoyaltyStatsBean> loadAllAsList() throws DAOException
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from loyalty_stats, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of LoyaltyStatsManager bean
     * @throws DAOException
     */
    //6
    public LoyaltyStatsBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    /**
     * Loads the given number of rows from loyalty_stats, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of LoyaltyStatsManager bean
     * @throws DAOException
     */
    //6
    public List<LoyaltyStatsBean> loadAllAsList(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of LoyaltyStatsBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting LoyaltyStatsBean table
     * @throws DAOException
     */
    //7
    public LoyaltyStatsBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }
    /**
     * Retrieves a list of LoyaltyStatsBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting LoyaltyStatsBean table
     * @throws DAOException
     */
    //7
    public List<LoyaltyStatsBean> loadByWhereAsList(String where) throws DAOException
    {
        return this.loadByWhereAsList(where, null);
    }

     /**
     * Retrieves a single instance of LoyaltyStatsBean given a sql 'where' clause. If there are multiple results, 
     * first one is returned. If there are no results, NULL is returned
     *
     * @param where the sql 'where' clause
     * @return the resulting LoyaltyStatsBean entry or NULL if no results are found
     * @throws DAOException
     */
    //7
    public LoyaltyStatsBean loadSingleEntryByWhere(String where) throws DAOException
    {
	List<LoyaltyStatsBean> retVal = this.loadByWhereAsList(where, null);

	if (retVal.size() > 0)
		return retVal.get(0);

        return null;
    }

    /**
     * Retrieves an array of LoyaltyStatsBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting LoyaltyStatsBean table
     * @throws DAOException
     */
    //8
    public LoyaltyStatsBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of LoyaltyStatsBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting LoyaltyStatsBean table
     * @throws DAOException
     */
    //8
    public List<LoyaltyStatsBean> loadByWhereAsList(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of LoyaltyStatsBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting LoyaltyStatsBean table
     * @throws DAOException
     */
    //9
    public LoyaltyStatsBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return (LoyaltyStatsBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new LoyaltyStatsBean[0]);
    }

    /**
     * Retrieves a list of LoyaltyStatsBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting LoyaltyStatsBean table
     * @throws DAOException
     */
    //9
    public List<LoyaltyStatsBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FULL_FIELDS).append(" FROM loyalty_stats ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM loyalty_stats ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        // System.out.println("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();

	    log.trace("Executing SQL --> {}", sql.toString());

            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSetAsList(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }

    /**
	 * Loads a list based on the provided prepared statement queries. The query should have place holders i.e. ? and the values of the place holders
	 * must be passed in parameters array. Use wrapper classes like Integer, String, Long, Float etc.
	 * 
	 * @param where
	 * @param parameters
	 *            List of parameters for prepared statement
	 * @param fieldList
	 *            NULL if all fields are needed
	 * @return
	 * @throws DAOException
	 */
	public List<LoyaltyStatsBean> loadByPreparedStatementAsList(String where, Object[] parameters, int[] fieldList) throws DAOException
	{
		ConnectionProfile cp = null;
		// System.out.println("loadByWhere: " + sql);
		try
		{
			cp = loadConnectionProfileByPreparedStatement(where, parameters, fieldList);
			return this.decodeResultSetAsList(cp.getResultSet(), fieldList, 1, -1);
		}
		finally
		{
			this.getManager().close(cp);
		}
	}
	
	/**
	 * Executes a COUNT(*) query with WHERE condition and parameters using PreparedStatement
	 * 
	 * @param where
	 * @param parameters
	 * @param fieldList
	 * @return
	 * @throws DAOException
	 */
	public Integer countByPreparedStatement(String where, Object[] parameters) throws DAOException
	{
		StringBuffer sql = new StringBuffer(128);
		sql.append("SELECT COUNT(*) FROM loyalty_stats ").append(where);

		ConnectionProfile cp = null;
		// System.out.println("loadByWhere: " + sql);
		try
		{
			log.trace("Executing SQL --> {} [{}]", sql.toString(), parameters);
			cp = this.getManager().executeQueryByPreparedStatement(sql.toString(), parameters);

			if (cp.getResultSet().next())
			{
				return cp.getResultSet().getInt(1);
			}

			return 0;
		}
		catch (SQLException e)
		{
			throw new ObjectRetrievalException(e);
		}
		finally
		{
			this.getManager().close(cp);
		}
	}	

	/**
	 * Executes the WHERE query and returns the connection profile. Note that the connection profile must be closed after use.
	 * 
	 * @param where
	 * @param parameters
	 * @param fieldList
	 * @return
	 * @throws DAOException
	 */
	public ConnectionProfile loadConnectionProfileByPreparedStatement(String where, Object[] parameters, int[] fieldList) throws DAOException
	{
		StringBuffer sql = new StringBuffer(128);
		if (fieldList == null)
		{
			sql.append("SELECT ").append(ALL_FULL_FIELDS).append(" FROM loyalty_stats ").append(where);
		}
		else
		{
			sql.append("SELECT ");
			for (int i = 0; i < fieldList.length; i++)
			{
				if (i != 0)
				{
					sql.append(",");
				}
				sql.append(FULL_FIELD_NAMES[fieldList[i]]);
			}
			sql.append(" FROM loyalty_stats ");
			sql.append(where);
		}
		// System.out.println("loadByWhere: " + sql);
		try
		{
			log.trace("Executing SQL --> {} [{}]", sql.toString(), parameters);
			return this.getManager().executeQueryByPreparedStatement(sql.toString(), parameters);
		}
		catch (SQLException e)
		{
			throw new ObjectRetrievalException(e);
		}
		finally
		{
			sql = null;
		}
	}

	/**
	 * Fetches 'batchSize' entries from the connection profile and returns the resulting list.
	 * 
	 * @param cp
	 * @param batchSize
	 * @param fieldList
	 * @return
	 * @throws DAOException
	 * @throws SQLException
	 */
	public List<LoyaltyStatsBean> getNextBatch(ConnectionProfile cp, int batchSize, int[] fieldList) throws DAOException, SQLException
	{
		if (cp == null)
			return null;

		if (cp.getResultSet() == null)
			return null;

		if (batchSize <= 0)
			return null;

		int fetchedCount = 0;
		List<LoyaltyStatsBean> retVal = new ArrayList<LoyaltyStatsBean>();

		while (fetchedCount < batchSize && cp.getResultSet().next())
		{
			retVal.add(decodeRow(cp.getResultSet(), fieldList));
			fetchedCount++;
		}

		if (retVal.size() <= 0)
		{
			return null;
		}

		return retVal;
	}

    /**
	 * Loads a single instance based on the provided prepared statement query. The query should have place holders i.e. ? and the values of the place holders
	 * must be passed in parameters array. Use wrapper classes like Integer, String, Long, Float etc.
	 * 
	 * @param where
	 * @param parameters
	 *            List of parameters for prepared statement
	 * @param fieldList
	 *            NULL if all fields are needed
	 * @return Returns NULL if no entry is found in the query
	 * @throws DAOException
	 */
    public LoyaltyStatsBean loadSingleEntryByPreparedStatement(String where, Object[] parameters, int[] fieldList) throws DAOException
    {
	List<LoyaltyStatsBean> list = loadByPreparedStatementAsList(where, parameters, fieldList);

	if (list.size() > 0)
	{
		return list.get(0);
	}
	else
	{
		return null;
	}
    }	


    /**
     * Deletes all rows from loyalty_stats table.
     * @return the number of deleted rows.
     * @throws DAOException
     */
    //10
    public int deleteAll() throws DAOException
    {
        return this.deleteByWhere("");
    }


    /**
     * Deletes rows from the loyalty_stats table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
  	    
	    log.trace("Executing SQL --> DELETE FROM loyalty_stats {}", where);	

            StringBuilder sql = new StringBuilder("DELETE FROM loyalty_stats " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the LoyaltyStatsBean bean into the database.
     *
     * @param bean the LoyaltyStatsBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public LoyaltyStatsBean save(LoyaltyStatsBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the LoyaltyStatsBean bean into the database.
     *
     * @param bean the LoyaltyStatsBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public LoyaltyStatsBean insert(LoyaltyStatsBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into loyalty_stats (");

            if (bean.isLastUpdatedModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("last_updated");
                _dirtyCount++;
            }

            if (bean.isPointsRemainingModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("points_remaining");
                _dirtyCount++;
            }

            if (bean.isPointsConsumedModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("points_consumed");
                _dirtyCount++;
            }

            if (bean.isTotalPointsModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("total_points");
                _dirtyCount++;
            }

            if (bean.isLoyaltyStatIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("loyalty_stat_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

	    log.trace("Executing SQL --> {} [{}]", sql.toString(), bean);	

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            if (bean.getLoyaltyStatId() == null)
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setLoyaltyStatId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified(false);
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the LoyaltyStatsBean bean record in the database according to the changes.
     *
     * @param bean the LoyaltyStatsBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public LoyaltyStatsBean update(LoyaltyStatsBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE loyalty_stats SET ");
            boolean useComma=false;

            if (bean.isLastUpdatedModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("last_updated=?");
            }

            if (bean.isPointsRemainingModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("points_remaining=?");
            }

            if (bean.isPointsConsumedModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("points_consumed=?");
            }

            if (bean.isTotalPointsModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("total_points=?");
            }

            if (bean.isLoyaltyStatIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("loyalty_stat_id=?");
            }
            sql.append(" WHERE ");
            sql.append("loyalty_stat_id=?");
            // System.out.println("update : " + sql.toString());

	    log.trace("Executing SQL --> {} [{}]", sql.toString(), bean);	

            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getLoyaltyStatId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getLoyaltyStatId()); }
            ps.executeUpdate();
            bean.resetIsModified(false);
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of LoyaltyStatsBean beans into the database.
     *
     * @param beans the LoyaltyStatsBean bean table to be saved
     * @return the saved LoyaltyStatsBean array.
     * @throws DAOException
     */
    //15
    public LoyaltyStatsBean[] save(LoyaltyStatsBean[] beans) throws DAOException
    {
        for (LoyaltyStatsBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Saves a list of LoyaltyStatsBean beans into the database.
     *
     * @param beans the LoyaltyStatsBean bean table to be saved
     * @return the saved LoyaltyStatsBean array.
     * @throws DAOException
     */
    //15
    public List<LoyaltyStatsBean> save(List<LoyaltyStatsBean> beans) throws DAOException
    {
        for (LoyaltyStatsBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Insert an array of LoyaltyStatsBean beans into the database.
     *
     * @param beans the LoyaltyStatsBean bean table to be inserted
     * @return the saved LoyaltyStatsBean array.
     * @throws DAOException
     */
    //16
    public LoyaltyStatsBean[] insert(LoyaltyStatsBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Insert a list of LoyaltyStatsBean beans into the database.
     *
     * @param beans the LoyaltyStatsBean bean table to be inserted
     * @return the saved LoyaltyStatsBean array.
     * @throws DAOException
     */
    //16
    public List<LoyaltyStatsBean> insert(List<LoyaltyStatsBean> beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of LoyaltyStatsBean beans into the database.
     *
     * @param beans the LoyaltyStatsBean bean table to be inserted
     * @return the saved LoyaltyStatsBean array.
     * @throws DAOException
     */
    //17
    public LoyaltyStatsBean[] update(LoyaltyStatsBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates a list of LoyaltyStatsBean beans into the database.
     *
     * @param beans the LoyaltyStatsBean bean table to be inserted
     * @return the saved LoyaltyStatsBean array.
     * @throws DAOException
     */
    //17
    public List<LoyaltyStatsBean> update(List<LoyaltyStatsBean> beans) throws DAOException
    {
        return this.save(beans);
    }
    

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique LoyaltyStatsBean bean from a template one giving a c
     *
     * @param bean the LoyaltyStatsBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public LoyaltyStatsBean loadUniqueUsingTemplate(LoyaltyStatsBean bean) throws DAOException
    {
         LoyaltyStatsBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }

         // if (beans.length > 1) {
         //    throw new ObjectRetrievalException("More than one element !!");
         // }

         return beans[0];
     }

    /**
     * Loads an array of LoyaltyStatsBean from a template one.
     *
     * @param bean the LoyaltyStatsBean template to look for
     * @return all the LoyaltyStatsBean matching the template
     * @throws DAOException
     */
    //19
    public LoyaltyStatsBean[] loadUsingTemplate(LoyaltyStatsBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads a list of LoyaltyStatsBean from a template one.
     *
     * @param bean the LoyaltyStatsBean template to look for
     * @return all the LoyaltyStatsBean matching the template
     * @throws DAOException
     */
    //19
    public List<LoyaltyStatsBean> loadUsingTemplateAsList(LoyaltyStatsBean bean) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of LoyaltyStatsBean from a template one, given the start row and number of rows.
     *
     * @param bean the LoyaltyStatsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the LoyaltyStatsBean matching the template
     * @throws DAOException
     */
    //20
    public LoyaltyStatsBean[] loadUsingTemplate(LoyaltyStatsBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads a list of LoyaltyStatsBean from a template one, given the start row and number of rows.
     *
     * @param bean the LoyaltyStatsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the LoyaltyStatsBean matching the template
     * @throws DAOException
     */
    //20
    public List<LoyaltyStatsBean> loadUsingTemplateAsList(LoyaltyStatsBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of LoyaltyStatsBean from a template one, given the start row and number of rows.
     *
     * @param bean the LoyaltyStatsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the LoyaltyStatsBean matching the template
     * @throws DAOException
     */
    //20
    public LoyaltyStatsBean[] loadUsingTemplate(LoyaltyStatsBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
    	return (LoyaltyStatsBean[])this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new LoyaltyStatsBean[0]);
    }

    /**
     * Loads a list of LoyaltyStatsBean from a template one, given the start row and number of rows.
     *
     * @param bean the LoyaltyStatsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?

     * @return all the LoyaltyStatsBean matching the template
     * @throws DAOException
     */
    //20
    public List<LoyaltyStatsBean> loadUsingTemplateAsList(LoyaltyStatsBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM loyalty_stats ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... loading all");
            }
            // System.out.println("loadUsingTemplate: " + sql.toString());

	    log.trace("Executing SQL --> {} [{}]", sql.toString(), bean);	

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatementAsList(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a LoyaltyStatsBean template.
     *
     * @param bean the LoyaltyStatsBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(LoyaltyStatsBean bean) throws DAOException
    {
        if (bean.isLoyaltyStatIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getLoyaltyStatId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM loyalty_stats ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

	    log.trace("Executing SQL --> {} [{}]", sql.toString(), bean);		

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table loyalty_stats.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table loyalty_stats with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM loyalty_stats " + where;
        // System.out.println("countWhere: " + sql);

	log.trace("Executing SQL --> {}", sql);	

        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table loyalty_stats with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific LoyaltyStatsBean bean
     *
     * @param bean the LoyaltyStatsBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(LoyaltyStatsBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific LoyaltyStatsBean bean , given the start row and number of rows.
     *
     * @param bean the LoyaltyStatsBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(LoyaltyStatsBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific LoyaltyStatsBean bean given the start row and number of rows and the search type
     *
     * @param bean the LoyaltyStatsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(LoyaltyStatsBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM loyalty_stats");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

	    log.trace("Executing SQL --> {} [{}]", sql.toString(), bean);	

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuilder sqlWhere, LoyaltyStatsBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isLastUpdatedModified()) {
                _dirtyCount ++;
                if (bean.getLastUpdated() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("last_updated IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("last_updated = ?");
                }
            }
            if (bean.isPointsRemainingModified()) {
                _dirtyCount ++;
                if (bean.getPointsRemaining() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("points_remaining IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("points_remaining = ?");
                }
            }
            if (bean.isPointsConsumedModified()) {
                _dirtyCount ++;
                if (bean.getPointsConsumed() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("points_consumed IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("points_consumed = ?");
                }
            }
            if (bean.isTotalPointsModified()) {
                _dirtyCount ++;
                if (bean.getTotalPoints() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("total_points IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("total_points = ?");
                }
            }
            if (bean.isLoyaltyStatIdModified()) {
                _dirtyCount ++;
                if (bean.getLoyaltyStatId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("loyalty_stat_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("loyalty_stat_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, LoyaltyStatsBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isLastUpdatedModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getLastUpdated() + "]");
                if (bean.getLastUpdated() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getLastUpdated().getTime())); }
            }
            if (bean.isPointsRemainingModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getPointsRemaining() + "]");
                if (bean.getPointsRemaining() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getPointsRemaining()); }
            }
            if (bean.isPointsConsumedModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getPointsConsumed() + "]");
                if (bean.getPointsConsumed() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setLong(ps, ++_dirtyCount, bean.getPointsConsumed()); }
            }
            if (bean.isTotalPointsModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getTotalPoints() + "]");
                if (bean.getTotalPoints() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTotalPoints()); }
            }
            if (bean.isLoyaltyStatIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getLoyaltyStatId() + "]");
                if (bean.getLoyaltyStatId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getLoyaltyStatId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of LoyaltyStatsBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting LoyaltyStatsBean table
     * @throws DAOException
     */
    //28
    public LoyaltyStatsBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
    	return (LoyaltyStatsBean[])this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new LoyaltyStatsBean[0]);
    }

    /**
     * decode a resultset in a list of LoyaltyStatsBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting LoyaltyStatsBean table
     * @throws DAOException
     */
    //28
    public List<LoyaltyStatsBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List<LoyaltyStatsBean> v = new ArrayList<LoyaltyStatsBean>();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return v;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the loyalty_stats on a LoyaltyStatsBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting LoyaltyStatsBean bean
     * @throws DAOException
     */
    //29
    public LoyaltyStatsBean decodeRow(ResultSet rs) throws DAOException
    {
        return decodeRow(rs, 1);
    }

    /**
     * Transforms a ResultSet iterating on the loyalty_stats on a LoyaltyStatsBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @param start First index of resultset
     * @return bean resulting LoyaltyStatsBean bean
     * @throws DAOException
     */
    //29
    public LoyaltyStatsBean decodeRow(ResultSet rs, Integer start) throws DAOException
    {
        LoyaltyStatsBean bean = this.createLoyaltyStatsBean();
        try
        {
		java.util.Date date = null;
            		if ((date = rs.getTimestamp(start)) != null)
		{
			bean.setLastUpdated(date.getTime());
		}
	                start++;

            		bean.setPointsRemaining(Manager.getInteger(rs, start));
	                start++;

            		bean.setPointsConsumed(Manager.getLong(rs, start));
	                start++;

            		bean.setTotalPoints(Manager.getInteger(rs, start));
	                start++;

            		bean.setLoyaltyStatId(Manager.getInteger(rs, start));
	                start++;

        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified(false);

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the loyalty_stats table on a LoyaltyStatsBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting LoyaltyStatsBean bean
     * @throws DAOException
     */
    //30
    public LoyaltyStatsBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        return decodeRow(rs, fieldList, 1);
    }

    /**
     * Transforms a ResultSet iterating on the loyalty_stats table on a LoyaltyStatsBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @param pos start index of the resultset
     * @return bean resulting LoyaltyStatsBean bean
     * @throws DAOException
     */
    //30
    public LoyaltyStatsBean decodeRow(ResultSet rs, int[] fieldList, Integer pos) throws DAOException
    {
        LoyaltyStatsBean bean = this.createLoyaltyStatsBean();
        try
        {
		java.util.Date date = null;		
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_LAST_UPDATED:
						if ((date = rs.getTimestamp(pos)) != null)
			{
				bean.setLastUpdated(date.getTime());
			}
	 	   				pos++;
                        break;
                    case ID_POINTS_REMAINING:
						bean.setPointsRemaining(Manager.getInteger(rs, pos));
	    					pos++;
                        break;
                    case ID_POINTS_CONSUMED:
						bean.setPointsConsumed(Manager.getLong(rs, pos));
	    					pos++;
                        break;
                    case ID_TOTAL_POINTS:
						bean.setTotalPoints(Manager.getInteger(rs, pos));
	    					pos++;
                        break;
                    case ID_LOYALTY_STAT_ID:
						bean.setLoyaltyStatId(Manager.getInteger(rs, pos));
	    					pos++;
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified(false);

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the loyalty_stats on a LoyaltyStatsBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting LoyaltyStatsBean bean
     * @throws DAOException
     */
    //31
    public LoyaltyStatsBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
		java.util.Date date = null;
        LoyaltyStatsBean bean = this.createLoyaltyStatsBean();
        try
        {
						if ((date = rs.getTimestamp("loyalty_stats.last_updated")) != null)
			{
				bean.setLastUpdated(date.getTime());
			}
	 	   							bean.setPointsRemaining(Manager.getInteger(rs, "loyalty_stats.points_remaining"));
	    								bean.setPointsConsumed(Manager.getLong(rs, "loyalty_stats.points_consumed"));
	    								bean.setTotalPoints(Manager.getInteger(rs, "loyalty_stats.total_points"));
	    								bean.setLoyaltyStatId(Manager.getInteger(rs, "loyalty_stats.loyalty_stat_id"));
	    		        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified(false);

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of LoyaltyStatsBean
     * @throws DAOException
     */
    //32
    public LoyaltyStatsBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of LoyaltyStatsBean
     * @throws DAOException
     */
    //32
    public List<LoyaltyStatsBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of LoyaltyStatsBean
     * @throws DAOException
     */
    //33
    public LoyaltyStatsBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return (LoyaltyStatsBean[])this.loadByPreparedStatementAsList(ps, fieldList).toArray(new LoyaltyStatsBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of LoyaltyStatsBean
     * @throws DAOException
     */
    //33
    public List<LoyaltyStatsBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    {		        
        ResultSet rs =  null;
		List<LoyaltyStatsBean> v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new ArrayList<LoyaltyStatsBean>();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return v;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of LoyaltyStatsBean
     * @throws DAOException
     */
    //34
    public LoyaltyStatsBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of LoyaltyStatsBean
     * @throws DAOException
     */
    //34
    public List<LoyaltyStatsBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSetAsList(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    private LoyaltyStatsListener listener = null;

    /**
     * Registers a unique LoyaltyStatsListener listener.
     */
    //35
    public void registerListener(LoyaltyStatsListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the LoyaltyStatsBean bean.
     *
     * @param bean the LoyaltyStatsBean bean to be saved
     */
    //36
    private void beforeInsert(LoyaltyStatsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the LoyaltyStatsBean bean.
     *
     * @param bean the LoyaltyStatsBean bean to be saved
     */
    //37
    private void afterInsert(LoyaltyStatsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the LoyaltyStatsBean bean.
     *
     * @param bean the LoyaltyStatsBean bean to be updated
     */
    //38
    private void beforeUpdate(LoyaltyStatsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the LoyaltyStatsBean bean.
     *
     * @param bean the LoyaltyStatsBean bean to be updated
     */
    //39
    private void afterUpdate(LoyaltyStatsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the LoyaltyStatsBean bean.
     *
     * @param bean the LoyaltyStatsBean bean to be deleted
     */
    private void beforeDelete(LoyaltyStatsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the LoyaltyStatsBean bean.
     *
     * @param bean the LoyaltyStatsBean bean to be deleted
     */
    private void afterDelete(LoyaltyStatsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    public int getFieldsLength()
    {
		return FIELD_NAMES.length;
    }

    public String getAllFields()
    {
		return ALL_FULL_FIELDS;
    }

    public BaseGeneratedBean decodeRowAndReturnBaseBean(ResultSet rs) throws DAOException
    {
		return metaDataDecodeRow(rs);
    }



}
