// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import uk.co.planetbeyond.service.generated.BaseGeneratedBean;
import uk.co.planetbeyond.service.generated.ConnectionProfile;
import uk.co.planetbeyond.service.generated.Manager;

import uk.co.planetbeyond.service.generated.exception.DAOException;

/**
 * Use this class to put a join on three tables
 * 
 * @author javed
 * 
 * @param <T>
 * @param <V>
 * @param <Z>
 * 
 */
public class ThreeTableJoin<T extends BaseGeneratedBean & JoinHelperInterface, V extends BaseGeneratedBean & JoinHelperInterface, Z extends BaseGeneratedBean & JoinHelperInterface> implements Serializable
{
        private static final long serialVersionUID = -5728023644636666208L;
        
	private T bean1;
	private V bean2;
	private Z bean3;

	public ThreeTableJoin(T bean1, V bean2, Z bean3)
	{
		this.bean1 = bean1;
		this.bean2 = bean2;
		this.bean3 = bean3;
	}

	/**
	 * Puts a join on three tables. The where clause must also contain the join condition between the three tables
	 * 
	 * @param where
	 *            Where clause along with the join condition. This MUST contain the join condition.
	 * @param parameters
	 *            Parameters for the where clause
	 * @return
	 * @throws SQLException
	 */
	public List<ThreeTableJoin<T, V, Z>> join(String where, Object[] parameters) throws SQLException
	{
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ").append(bean1.getBaseManager().getAllFields()).append(",").append(bean2.getBaseManager().getAllFields()).append(",").append(bean3.getBaseManager().getAllFields());
		sql.append(" FROM ").append(bean1.getTableName()).append(", ").append(bean2.getTableName()).append(", ").append(bean3.getTableName()).append(" ").append(where);

		return executeQuery(parameters, sql);
	}

	/**
	 * Puts a left outer join on three tables.
	 * 
	 * @param on1
	 *            The join condition for second tables
	 * @param on2
	 *            The join condition for third table
	 * @param where
	 *            The where clause. This does NOT have to contain the join condition
	 * @param parameters
	 *            Parameters for where clause
	 * @return
	 * @throws SQLException
	 */
	public List<ThreeTableJoin<T, V, Z>> leftOuterJoin(String on1, String on2, String where, Object[] parameters) throws SQLException
	{
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ").append(bean1.getBaseManager().getAllFields()).append(",").append(bean2.getBaseManager().getAllFields()).append(",").append(bean3.getBaseManager().getAllFields());
		sql.append(" FROM ").append(bean1.getTableName());
		sql.append(" LEFT OUTER JOIN ").append(bean2.getTableName()).append(" ON ").append(on1);
		sql.append(" LEFT OUTER JOIN ").append(bean3.getTableName()).append(" ON ").append(on2).append(" ").append(where);

		return executeQuery(parameters, sql);
	}

	/**
	 * @param parameters
	 * @param sql
	 * @return
	 * @throws DAOException
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	private List<ThreeTableJoin<T, V, Z>> executeQuery(Object[] parameters, StringBuffer sql) throws DAOException, SQLException
	{
		ConnectionProfile cp = null;
		List<ThreeTableJoin<T, V, Z>> retVal = new ArrayList<ThreeTableJoin<T, V, Z>>();

		try
		{
			cp = Manager.getInstance().executeQueryByPreparedStatement(sql.toString(), parameters);

			while (cp.getResultSet().next())
			{
				T b1 = (T) bean1.getBaseManager().decodeRowAndReturnBaseBean(cp.getResultSet());
				V b2 = (V) bean2.getBaseManager().decodeRowAndReturnBaseBean(cp.getResultSet());
				Z b3 = (Z) bean3.getBaseManager().decodeRowAndReturnBaseBean(cp.getResultSet());
				retVal.add(new ThreeTableJoin<T, V, Z>(b1, b2, b3));
			}

			return retVal;
		}
		finally
		{
			Manager.getInstance().close(cp);
		}
	}

	public T getBean1()
	{
		return bean1;
	}

	public V getBean2()
	{
		return bean2;
	}

	public Z getBean3()
	{
		return bean3;
	}

	public void setBean1(T bean1)
	{
		this.bean1 = bean1;
	}

	public void setBean2(V bean2)
	{
		this.bean2 = bean2;
	}

	public void setBean3(Z bean3)
	{
		this.bean3 = bean3;
	}
}

