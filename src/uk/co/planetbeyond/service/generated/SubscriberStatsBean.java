




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.service.manager.SubscriberStatsManagerImpl;
import uk.co.planetbeyond.service.generated.GeneratedBean;





import uk.co.planetbeyond.service.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * SubscriberStatsBean is a mapping of subscriber_stats Table.
 * @author sql2java
*/
@Persistent
public class SubscriberStatsBean extends BaseSubscriberStatsBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8212568703426682458L;
	
    private boolean smsAlertEligibleStatusIsModified = false;
    private boolean smsAlertEligibleStatusIsInitialized = false;

    private boolean lastsmsAlertDateIsModified = false;
    private boolean lastsmsAlertDateIsInitialized = false;

    private boolean lastsmsAlertIdIsModified = false;
    private boolean lastsmsAlertIdIsInitialized = false;

    private boolean lastviewedFactIdIsModified = false;
    private boolean lastviewedFactIdIsInitialized = false;

    private boolean lastviewedAdWatchtimeIsModified = false;
    private boolean lastviewedAdWatchtimeIsInitialized = false;

    private boolean lastviewedAdIdIsModified = false;
    private boolean lastviewedAdIdIsInitialized = false;

    private boolean subscriberStatsIdIsModified = false;
    private boolean subscriberStatsIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a SubscriberStatsBean is via the createSubscriberStatsBean method in SubscriberStatsManager or
     * via the factory class SubscriberStatsFactory create method
     */
    public SubscriberStatsBean()
    {
    }



    /**
     * Setter method for smsAlertEligibleStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to smsAlertEligibleStatus
     */
    @Override
    public void setSmsAlertEligibleStatus(Integer newVal)
    {
        if ((newVal != null && smsAlertEligibleStatus != null && (newVal.compareTo(smsAlertEligibleStatus) == 0)) ||
            (newVal == null && smsAlertEligibleStatus == null && smsAlertEligibleStatusIsInitialized)) {
            return;
        }
        smsAlertEligibleStatus = newVal;
        smsAlertEligibleStatusIsModified = true;
        smsAlertEligibleStatusIsInitialized = true;
    }

    /**
     * Setter method for smsAlertEligibleStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to smsAlertEligibleStatus
     */
    public void setSmsAlertEligibleStatus(int newVal)
    {
        setSmsAlertEligibleStatus(new Integer(newVal));
    }

    /**
     * Determines if the smsAlertEligibleStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSmsAlertEligibleStatusModified()
    {
        return smsAlertEligibleStatusIsModified;
    }

    /**
     * Manually set whether smsAlertEligibleStatus has been modified or not.
     */
    public void isSmsAlertEligibleStatusModified(boolean value)
    {
        smsAlertEligibleStatusIsModified = value;
    }	

    /**
     * Determines if the smsAlertEligibleStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSmsAlertEligibleStatusInitialized()
    {
        return smsAlertEligibleStatusIsInitialized;
    }

    /**
     * Manually set whether smsAlertEligibleStatus has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSmsAlertEligibleStatusInitialized(boolean value)
    {
        smsAlertEligibleStatusIsInitialized = value;
    }



    /**
     * Setter method for lastsmsAlertDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lastsmsAlertDate
     */
    @Override
    public void setLastsmsAlertDate(java.util.Date newVal)
    {
        if ((newVal != null && lastsmsAlertDate != null && (newVal.compareTo(lastsmsAlertDate) == 0)) ||
            (newVal == null && lastsmsAlertDate == null && lastsmsAlertDateIsInitialized)) {
            return;
        }
        lastsmsAlertDate = newVal;
        lastsmsAlertDateIsModified = true;
        lastsmsAlertDateIsInitialized = true;
    }

    /**
     * Setter method for lastsmsAlertDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to lastsmsAlertDate
     */
    public void setLastsmsAlertDate(long newVal)
    {
        setLastsmsAlertDate(new java.util.Date(newVal));
    }

    /**
     * Determines if the lastsmsAlertDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLastsmsAlertDateModified()
    {
        return lastsmsAlertDateIsModified;
    }

    /**
     * Manually set whether lastsmsAlertDate has been modified or not.
     */
    public void isLastsmsAlertDateModified(boolean value)
    {
        lastsmsAlertDateIsModified = value;
    }	

    /**
     * Determines if the lastsmsAlertDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLastsmsAlertDateInitialized()
    {
        return lastsmsAlertDateIsInitialized;
    }

    /**
     * Manually set whether lastsmsAlertDate has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isLastsmsAlertDateInitialized(boolean value)
    {
        lastsmsAlertDateIsInitialized = value;
    }



    /**
     * Setter method for lastsmsAlertId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lastsmsAlertId
     */
    @Override
    public void setLastsmsAlertId(Integer newVal)
    {
        if ((newVal != null && lastsmsAlertId != null && (newVal.compareTo(lastsmsAlertId) == 0)) ||
            (newVal == null && lastsmsAlertId == null && lastsmsAlertIdIsInitialized)) {
            return;
        }
        lastsmsAlertId = newVal;
        lastsmsAlertIdIsModified = true;
        lastsmsAlertIdIsInitialized = true;
    }

    /**
     * Setter method for lastsmsAlertId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to lastsmsAlertId
     */
    public void setLastsmsAlertId(int newVal)
    {
        setLastsmsAlertId(new Integer(newVal));
    }

    /**
     * Determines if the lastsmsAlertId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLastsmsAlertIdModified()
    {
        return lastsmsAlertIdIsModified;
    }

    /**
     * Manually set whether lastsmsAlertId has been modified or not.
     */
    public void isLastsmsAlertIdModified(boolean value)
    {
        lastsmsAlertIdIsModified = value;
    }	

    /**
     * Determines if the lastsmsAlertId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLastsmsAlertIdInitialized()
    {
        return lastsmsAlertIdIsInitialized;
    }

    /**
     * Manually set whether lastsmsAlertId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isLastsmsAlertIdInitialized(boolean value)
    {
        lastsmsAlertIdIsInitialized = value;
    }



    /**
     * Setter method for lastviewedFactId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lastviewedFactId
     */
    @Override
    public void setLastviewedFactId(Integer newVal)
    {
        if ((newVal != null && lastviewedFactId != null && (newVal.compareTo(lastviewedFactId) == 0)) ||
            (newVal == null && lastviewedFactId == null && lastviewedFactIdIsInitialized)) {
            return;
        }
        lastviewedFactId = newVal;
        lastviewedFactIdIsModified = true;
        lastviewedFactIdIsInitialized = true;
    }

    /**
     * Setter method for lastviewedFactId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to lastviewedFactId
     */
    public void setLastviewedFactId(int newVal)
    {
        setLastviewedFactId(new Integer(newVal));
    }

    /**
     * Determines if the lastviewedFactId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLastviewedFactIdModified()
    {
        return lastviewedFactIdIsModified;
    }

    /**
     * Manually set whether lastviewedFactId has been modified or not.
     */
    public void isLastviewedFactIdModified(boolean value)
    {
        lastviewedFactIdIsModified = value;
    }	

    /**
     * Determines if the lastviewedFactId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLastviewedFactIdInitialized()
    {
        return lastviewedFactIdIsInitialized;
    }

    /**
     * Manually set whether lastviewedFactId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isLastviewedFactIdInitialized(boolean value)
    {
        lastviewedFactIdIsInitialized = value;
    }



    /**
     * Setter method for lastviewedAdWatchtime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lastviewedAdWatchtime
     */
    @Override
    public void setLastviewedAdWatchtime(Integer newVal)
    {
        if ((newVal != null && lastviewedAdWatchtime != null && (newVal.compareTo(lastviewedAdWatchtime) == 0)) ||
            (newVal == null && lastviewedAdWatchtime == null && lastviewedAdWatchtimeIsInitialized)) {
            return;
        }
        lastviewedAdWatchtime = newVal;
        lastviewedAdWatchtimeIsModified = true;
        lastviewedAdWatchtimeIsInitialized = true;
    }

    /**
     * Setter method for lastviewedAdWatchtime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to lastviewedAdWatchtime
     */
    public void setLastviewedAdWatchtime(int newVal)
    {
        setLastviewedAdWatchtime(new Integer(newVal));
    }

    /**
     * Determines if the lastviewedAdWatchtime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLastviewedAdWatchtimeModified()
    {
        return lastviewedAdWatchtimeIsModified;
    }

    /**
     * Manually set whether lastviewedAdWatchtime has been modified or not.
     */
    public void isLastviewedAdWatchtimeModified(boolean value)
    {
        lastviewedAdWatchtimeIsModified = value;
    }	

    /**
     * Determines if the lastviewedAdWatchtime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLastviewedAdWatchtimeInitialized()
    {
        return lastviewedAdWatchtimeIsInitialized;
    }

    /**
     * Manually set whether lastviewedAdWatchtime has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isLastviewedAdWatchtimeInitialized(boolean value)
    {
        lastviewedAdWatchtimeIsInitialized = value;
    }



    /**
     * Setter method for lastviewedAdId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lastviewedAdId
     */
    @Override
    public void setLastviewedAdId(Integer newVal)
    {
        if ((newVal != null && lastviewedAdId != null && (newVal.compareTo(lastviewedAdId) == 0)) ||
            (newVal == null && lastviewedAdId == null && lastviewedAdIdIsInitialized)) {
            return;
        }
        lastviewedAdId = newVal;
        lastviewedAdIdIsModified = true;
        lastviewedAdIdIsInitialized = true;
    }

    /**
     * Setter method for lastviewedAdId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to lastviewedAdId
     */
    public void setLastviewedAdId(int newVal)
    {
        setLastviewedAdId(new Integer(newVal));
    }

    /**
     * Determines if the lastviewedAdId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLastviewedAdIdModified()
    {
        return lastviewedAdIdIsModified;
    }

    /**
     * Manually set whether lastviewedAdId has been modified or not.
     */
    public void isLastviewedAdIdModified(boolean value)
    {
        lastviewedAdIdIsModified = value;
    }	

    /**
     * Determines if the lastviewedAdId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLastviewedAdIdInitialized()
    {
        return lastviewedAdIdIsInitialized;
    }

    /**
     * Manually set whether lastviewedAdId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isLastviewedAdIdInitialized(boolean value)
    {
        lastviewedAdIdIsInitialized = value;
    }



    /**
     * Setter method for subscriberStatsId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to subscriberStatsId
     */
    @Override
    public void setSubscriberStatsId(Integer newVal)
    {
        if ((newVal != null && subscriberStatsId != null && (newVal.compareTo(subscriberStatsId) == 0)) ||
            (newVal == null && subscriberStatsId == null && subscriberStatsIdIsInitialized)) {
            return;
        }
        subscriberStatsId = newVal;
        subscriberStatsIdIsModified = true;
        subscriberStatsIdIsInitialized = true;
    }

    /**
     * Setter method for subscriberStatsId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to subscriberStatsId
     */
    public void setSubscriberStatsId(int newVal)
    {
        setSubscriberStatsId(new Integer(newVal));
    }

    /**
     * Determines if the subscriberStatsId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSubscriberStatsIdModified()
    {
        return subscriberStatsIdIsModified;
    }

    /**
     * Manually set whether subscriberStatsId has been modified or not.
     */
    public void isSubscriberStatsIdModified(boolean value)
    {
        subscriberStatsIdIsModified = value;
    }	

    /**
     * Determines if the subscriberStatsId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSubscriberStatsIdInitialized()
    {
        return subscriberStatsIdIsInitialized;
    }

    /**
     * Manually set whether subscriberStatsId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSubscriberStatsIdInitialized(boolean value)
    {
        subscriberStatsIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return smsAlertEligibleStatusIsModified 		|| lastsmsAlertDateIsModified  		|| lastsmsAlertIdIsModified  		|| lastviewedFactIdIsModified  		|| lastviewedAdWatchtimeIsModified  		|| lastviewedAdIdIsModified  		|| subscriberStatsIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        smsAlertEligibleStatusIsModified = isModified;
        lastsmsAlertDateIsModified = isModified;
        lastsmsAlertIdIsModified = isModified;
        lastviewedFactIdIsModified = isModified;
        lastviewedAdWatchtimeIsModified = isModified;
        lastviewedAdIdIsModified = isModified;
        subscriberStatsIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SubscriberStatsBean bean)
    {
        setSmsAlertEligibleStatus(bean.getSmsAlertEligibleStatus());
        setLastsmsAlertDate(bean.getLastsmsAlertDate());
        setLastsmsAlertId(bean.getLastsmsAlertId());
        setLastviewedFactId(bean.getLastviewedFactId());
        setLastviewedAdWatchtime(bean.getLastviewedAdWatchtime());
        setLastviewedAdId(bean.getLastviewedAdId());
        setSubscriberStatsId(bean.getSubscriberStatsId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseSubscriberStatsBean toBaseBean()
    {
	BaseSubscriberStatsBean bean = new BaseSubscriberStatsBean();
        bean.setSmsAlertEligibleStatus(getSmsAlertEligibleStatus());
        bean.setLastsmsAlertDate(getLastsmsAlertDate());
        bean.setLastsmsAlertId(getLastsmsAlertId());
        bean.setLastviewedFactId(getLastviewedFactId());
        bean.setLastviewedAdWatchtime(getLastviewedAdWatchtime());
        bean.setLastviewedAdId(getLastviewedAdId());
        bean.setSubscriberStatsId(getSubscriberStatsId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(SubscriberStatsBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	smsAlertEligibleStatusIsModified = bean.isSmsAlertEligibleStatusModified();
  	smsAlertEligibleStatusIsInitialized= bean.isSmsAlertEligibleStatusInitialized();
	lastsmsAlertDateIsModified = bean.isLastsmsAlertDateModified();
  	lastsmsAlertDateIsInitialized= bean.isLastsmsAlertDateInitialized();
	lastsmsAlertIdIsModified = bean.isLastsmsAlertIdModified();
  	lastsmsAlertIdIsInitialized= bean.isLastsmsAlertIdInitialized();
	lastviewedFactIdIsModified = bean.isLastviewedFactIdModified();
  	lastviewedFactIdIsInitialized= bean.isLastviewedFactIdInitialized();
	lastviewedAdWatchtimeIsModified = bean.isLastviewedAdWatchtimeModified();
  	lastviewedAdWatchtimeIsInitialized= bean.isLastviewedAdWatchtimeInitialized();
	lastviewedAdIdIsModified = bean.isLastviewedAdIdModified();
  	lastviewedAdIdIsInitialized= bean.isLastviewedAdIdInitialized();
	subscriberStatsIdIsModified = bean.isSubscriberStatsIdModified();
  	subscriberStatsIdIsInitialized= bean.isSubscriberStatsIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("sms_alert_eligible_status", getSmsAlertEligibleStatus() == null ? "" : getSmsAlertEligibleStatus().toString());
        dictionnary.put("lastsms_alert_date", getLastsmsAlertDate() == null ? "" : getLastsmsAlertDate().toString());
        dictionnary.put("lastsms_alert_id", getLastsmsAlertId() == null ? "" : getLastsmsAlertId().toString());
        dictionnary.put("lastviewed_fact_id", getLastviewedFactId() == null ? "" : getLastviewedFactId().toString());
        dictionnary.put("lastviewed_ad_watchtime", getLastviewedAdWatchtime() == null ? "" : getLastviewedAdWatchtime().toString());
        dictionnary.put("lastviewed_ad_id", getLastviewedAdId() == null ? "" : getLastviewedAdId().toString());
        dictionnary.put("subscriber_stats_id", getSubscriberStatsId() == null ? "" : getSubscriberStatsId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("subscriber_stats_id", getSubscriberStatsId() == null ? "" : getSubscriberStatsId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("sms_alert_eligible_status".equalsIgnoreCase(column) || "smsAlertEligibleStatus".equalsIgnoreCase(column)) {
            return getSmsAlertEligibleStatus() == null ? "" : getSmsAlertEligibleStatus().toString();
        } else if ("lastsms_alert_date".equalsIgnoreCase(column) || "lastsmsAlertDate".equalsIgnoreCase(column)) {
            return getLastsmsAlertDate() == null ? "" : getLastsmsAlertDate().toString();
        } else if ("lastsms_alert_id".equalsIgnoreCase(column) || "lastsmsAlertId".equalsIgnoreCase(column)) {
            return getLastsmsAlertId() == null ? "" : getLastsmsAlertId().toString();
        } else if ("lastviewed_fact_id".equalsIgnoreCase(column) || "lastviewedFactId".equalsIgnoreCase(column)) {
            return getLastviewedFactId() == null ? "" : getLastviewedFactId().toString();
        } else if ("lastviewed_ad_watchtime".equalsIgnoreCase(column) || "lastviewedAdWatchtime".equalsIgnoreCase(column)) {
            return getLastviewedAdWatchtime() == null ? "" : getLastviewedAdWatchtime().toString();
        } else if ("lastviewed_ad_id".equalsIgnoreCase(column) || "lastviewedAdId".equalsIgnoreCase(column)) {
            return getLastviewedAdId() == null ? "" : getLastviewedAdId().toString();
        } else if ("subscriber_stats_id".equalsIgnoreCase(column) || "subscriberStatsId".equalsIgnoreCase(column)) {
            return getSubscriberStatsId() == null ? "" : getSubscriberStatsId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof SubscriberStatsBean)) {
			return false;
		}

		SubscriberStatsBean obj = (SubscriberStatsBean) object;
		return new EqualsBuilder()
            .append(getSmsAlertEligibleStatus(), obj.getSmsAlertEligibleStatus())
            .append(getLastsmsAlertDate(), obj.getLastsmsAlertDate())
            .append(getLastsmsAlertId(), obj.getLastsmsAlertId())
            .append(getLastviewedFactId(), obj.getLastviewedFactId())
            .append(getLastviewedAdWatchtime(), obj.getLastviewedAdWatchtime())
            .append(getLastviewedAdId(), obj.getLastviewedAdId())
            .append(getSubscriberStatsId(), obj.getSubscriberStatsId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getSmsAlertEligibleStatus())
            .append(getLastsmsAlertDate())
            .append(getLastsmsAlertId())
            .append(getLastviewedFactId())
            .append(getLastviewedAdWatchtime())
            .append(getLastviewedAdId())
            .append(getSubscriberStatsId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("sms_alert_eligible_status", getSmsAlertEligibleStatus())
            .append("lastsms_alert_date", getLastsmsAlertDate())
            .append("lastsms_alert_id", getLastsmsAlertId())
            .append("lastviewed_fact_id", getLastviewedFactId())
            .append("lastviewed_ad_watchtime", getLastviewedAdWatchtime())
            .append("lastviewed_ad_id", getLastviewedAdId())
            .append("subscriber_stats_id", getSubscriberStatsId())
            .toString();
	}


    public int compareTo(Object object)
    {
        SubscriberStatsBean obj = (SubscriberStatsBean) object;
        return new CompareToBuilder()
            .append(getSmsAlertEligibleStatus(), obj.getSmsAlertEligibleStatus())
            .append(getLastsmsAlertDate(), obj.getLastsmsAlertDate())
            .append(getLastsmsAlertId(), obj.getLastsmsAlertId())
            .append(getLastviewedFactId(), obj.getLastviewedFactId())
            .append(getLastviewedAdWatchtime(), obj.getLastviewedAdWatchtime())
            .append(getLastviewedAdId(), obj.getLastviewedAdId())
            .append(getSubscriberStatsId(), obj.getSubscriberStatsId())
            .toComparison();
   }






    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the SubscriberStatsBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public SubscriberStatsBean save() throws DAOException
    {
        return SubscriberStatsManagerImpl.getInstance().save(this);
    }

    /**
     * Update the SubscriberStatsBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public SubscriberStatsBean update() throws DAOException
    {
        return SubscriberStatsManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the SubscriberStatsBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public SubscriberStatsBean insert() throws DAOException
    {
        return SubscriberStatsManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of SubscriberStatsBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return SubscriberStatsManagerImpl.getInstance().createSubscriberStatsBean();
    }

    /**
     * Creates and returns a new instance of SubscriberStatsBean.
     *
     * @return
     */
    //15
    public static SubscriberStatsBean newInstance()
    {
        return SubscriberStatsManagerImpl.getInstance().createSubscriberStatsBean();
    }

    /**
     * Returns manager class for SubscriberStats
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return SubscriberStatsManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. SubscriberStats
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "subscriber_stats";
    }



}
