




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.service.manager.AdvertisementManagerImpl;
import uk.co.planetbeyond.service.generated.GeneratedBean;

import uk.co.planetbeyond.service.generated.cache.AdvertScheduleCache;

import uk.co.planetbeyond.service.generated.AdvertScheduleBean;
import uk.co.planetbeyond.service.manager.AdvertScheduleManagerImpl;



import uk.co.planetbeyond.service.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * AdvertisementBean is a mapping of advertisement Table.
 * @author sql2java
*/
@Persistent
public class AdvertisementBean extends BaseAdvertisementBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8215873669860050714L;
	
    private boolean scheduleIdIsModified = false;
    private boolean scheduleIdIsInitialized = false;

    private boolean durationIsModified = false;
    private boolean durationIsInitialized = false;

    private boolean budgetIsModified = false;
    private boolean budgetIsInitialized = false;

    private boolean pathIsModified = false;
    private boolean pathIsInitialized = false;

    private boolean filenameIsModified = false;
    private boolean filenameIsInitialized = false;

    private boolean creationTimestampIsModified = false;
    private boolean creationTimestampIsInitialized = false;

    private boolean nameIsModified = false;
    private boolean nameIsInitialized = false;

    private boolean advertisementIdIsModified = false;
    private boolean advertisementIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a AdvertisementBean is via the createAdvertisementBean method in AdvertisementManager or
     * via the factory class AdvertisementFactory create method
     */
    public AdvertisementBean()
    {
    }



    /**
     * Setter method for scheduleId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to scheduleId
     */
    @Override
    public void setScheduleId(Integer newVal)
    {
        if ((newVal != null && scheduleId != null && (newVal.compareTo(scheduleId) == 0)) ||
            (newVal == null && scheduleId == null && scheduleIdIsInitialized)) {
            return;
        }
        scheduleId = newVal;
        scheduleIdIsModified = true;
        scheduleIdIsInitialized = true;
    }

    /**
     * Setter method for scheduleId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to scheduleId
     */
    public void setScheduleId(int newVal)
    {
        setScheduleId(new Integer(newVal));
    }

    /**
     * Determines if the scheduleId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isScheduleIdModified()
    {
        return scheduleIdIsModified;
    }

    /**
     * Manually set whether scheduleId has been modified or not.
     */
    public void isScheduleIdModified(boolean value)
    {
        scheduleIdIsModified = value;
    }	

    /**
     * Determines if the scheduleId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isScheduleIdInitialized()
    {
        return scheduleIdIsInitialized;
    }

    /**
     * Manually set whether scheduleId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isScheduleIdInitialized(boolean value)
    {
        scheduleIdIsInitialized = value;
    }



    /**
     * Setter method for duration.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to duration
     */
    @Override
    public void setDuration(Integer newVal)
    {
        if ((newVal != null && duration != null && (newVal.compareTo(duration) == 0)) ||
            (newVal == null && duration == null && durationIsInitialized)) {
            return;
        }
        duration = newVal;
        durationIsModified = true;
        durationIsInitialized = true;
    }

    /**
     * Setter method for duration.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to duration
     */
    public void setDuration(int newVal)
    {
        setDuration(new Integer(newVal));
    }

    /**
     * Determines if the duration has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDurationModified()
    {
        return durationIsModified;
    }

    /**
     * Manually set whether duration has been modified or not.
     */
    public void isDurationModified(boolean value)
    {
        durationIsModified = value;
    }	

    /**
     * Determines if the duration has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDurationInitialized()
    {
        return durationIsInitialized;
    }

    /**
     * Manually set whether duration has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isDurationInitialized(boolean value)
    {
        durationIsInitialized = value;
    }



    /**
     * Setter method for budget.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to budget
     */
    @Override
    public void setBudget(Integer newVal)
    {
        if ((newVal != null && budget != null && (newVal.compareTo(budget) == 0)) ||
            (newVal == null && budget == null && budgetIsInitialized)) {
            return;
        }
        budget = newVal;
        budgetIsModified = true;
        budgetIsInitialized = true;
    }

    /**
     * Setter method for budget.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to budget
     */
    public void setBudget(int newVal)
    {
        setBudget(new Integer(newVal));
    }

    /**
     * Determines if the budget has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBudgetModified()
    {
        return budgetIsModified;
    }

    /**
     * Manually set whether budget has been modified or not.
     */
    public void isBudgetModified(boolean value)
    {
        budgetIsModified = value;
    }	

    /**
     * Determines if the budget has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBudgetInitialized()
    {
        return budgetIsInitialized;
    }

    /**
     * Manually set whether budget has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isBudgetInitialized(boolean value)
    {
        budgetIsInitialized = value;
    }



    /**
     * Setter method for path.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to path
     */
    @Override
    public void setPath(String newVal)
    {
        if ((newVal != null && path != null && (newVal.compareTo(path) == 0)) ||
            (newVal == null && path == null && pathIsInitialized)) {
            return;
        }
        path = newVal;
        pathIsModified = true;
        pathIsInitialized = true;
    }

    /**
     * Determines if the path has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPathModified()
    {
        return pathIsModified;
    }

    /**
     * Manually set whether path has been modified or not.
     */
    public void isPathModified(boolean value)
    {
        pathIsModified = value;
    }	

    /**
     * Determines if the path has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPathInitialized()
    {
        return pathIsInitialized;
    }

    /**
     * Manually set whether path has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isPathInitialized(boolean value)
    {
        pathIsInitialized = value;
    }



    /**
     * Setter method for filename.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to filename
     */
    @Override
    public void setFilename(String newVal)
    {
        if ((newVal != null && filename != null && (newVal.compareTo(filename) == 0)) ||
            (newVal == null && filename == null && filenameIsInitialized)) {
            return;
        }
        filename = newVal;
        filenameIsModified = true;
        filenameIsInitialized = true;
    }

    /**
     * Determines if the filename has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFilenameModified()
    {
        return filenameIsModified;
    }

    /**
     * Manually set whether filename has been modified or not.
     */
    public void isFilenameModified(boolean value)
    {
        filenameIsModified = value;
    }	

    /**
     * Determines if the filename has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFilenameInitialized()
    {
        return filenameIsInitialized;
    }

    /**
     * Manually set whether filename has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isFilenameInitialized(boolean value)
    {
        filenameIsInitialized = value;
    }



    /**
     * Setter method for creationTimestamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    @Override
    public void setCreationTimestamp(java.util.Date newVal)
    {
        if ((newVal != null && creationTimestamp != null && (newVal.compareTo(creationTimestamp) == 0)) ||
            (newVal == null && creationTimestamp == null && creationTimestampIsInitialized)) {
            return;
        }
        creationTimestamp = newVal;
        creationTimestampIsModified = true;
        creationTimestampIsInitialized = true;
    }

    /**
     * Setter method for creationTimestamp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    public void setCreationTimestamp(long newVal)
    {
        setCreationTimestamp(new java.util.Date(newVal));
    }

    /**
     * Determines if the creationTimestamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreationTimestampModified()
    {
        return creationTimestampIsModified;
    }

    /**
     * Manually set whether creationTimestamp has been modified or not.
     */
    public void isCreationTimestampModified(boolean value)
    {
        creationTimestampIsModified = value;
    }	

    /**
     * Determines if the creationTimestamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreationTimestampInitialized()
    {
        return creationTimestampIsInitialized;
    }

    /**
     * Manually set whether creationTimestamp has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCreationTimestampInitialized(boolean value)
    {
        creationTimestampIsInitialized = value;
    }



    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    @Override
    public void setName(String newVal)
    {
        if ((newVal != null && name != null && (newVal.compareTo(name) == 0)) ||
            (newVal == null && name == null && nameIsInitialized)) {
            return;
        }
        name = newVal;
        nameIsModified = true;
        nameIsInitialized = true;
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified()
    {
        return nameIsModified;
    }

    /**
     * Manually set whether name has been modified or not.
     */
    public void isNameModified(boolean value)
    {
        nameIsModified = value;
    }	

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized()
    {
        return nameIsInitialized;
    }

    /**
     * Manually set whether name has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isNameInitialized(boolean value)
    {
        nameIsInitialized = value;
    }



    /**
     * Setter method for advertisementId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to advertisementId
     */
    @Override
    public void setAdvertisementId(Integer newVal)
    {
        if ((newVal != null && advertisementId != null && (newVal.compareTo(advertisementId) == 0)) ||
            (newVal == null && advertisementId == null && advertisementIdIsInitialized)) {
            return;
        }
        advertisementId = newVal;
        advertisementIdIsModified = true;
        advertisementIdIsInitialized = true;
    }

    /**
     * Setter method for advertisementId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to advertisementId
     */
    public void setAdvertisementId(int newVal)
    {
        setAdvertisementId(new Integer(newVal));
    }

    /**
     * Determines if the advertisementId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAdvertisementIdModified()
    {
        return advertisementIdIsModified;
    }

    /**
     * Manually set whether advertisementId has been modified or not.
     */
    public void isAdvertisementIdModified(boolean value)
    {
        advertisementIdIsModified = value;
    }	

    /**
     * Determines if the advertisementId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAdvertisementIdInitialized()
    {
        return advertisementIdIsInitialized;
    }

    /**
     * Manually set whether advertisementId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isAdvertisementIdInitialized(boolean value)
    {
        advertisementIdIsInitialized = value;
    }

    /** The AdvertSchedule referenced by this bean. */
    private AdvertScheduleBean referencedAdvertSchedule;
    /** Getter method for AdvertScheduleBean. */
    public AdvertScheduleBean getAdvertScheduleBean() {
        return this.referencedAdvertSchedule;
    }
    /** Setter method for AdvertScheduleBean. */
    public void setAdvertScheduleBean(AdvertScheduleBean reference) {
        this.referencedAdvertSchedule = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return scheduleIdIsModified 		|| durationIsModified  		|| budgetIsModified  		|| pathIsModified  		|| filenameIsModified  		|| creationTimestampIsModified  		|| nameIsModified  		|| advertisementIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        scheduleIdIsModified = isModified;
        durationIsModified = isModified;
        budgetIsModified = isModified;
        pathIsModified = isModified;
        filenameIsModified = isModified;
        creationTimestampIsModified = isModified;
        nameIsModified = isModified;
        advertisementIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(AdvertisementBean bean)
    {
        setScheduleId(bean.getScheduleId());
        setDuration(bean.getDuration());
        setBudget(bean.getBudget());
        setPath(bean.getPath());
        setFilename(bean.getFilename());
        setCreationTimestamp(bean.getCreationTimestamp());
        setName(bean.getName());
        setAdvertisementId(bean.getAdvertisementId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseAdvertisementBean toBaseBean()
    {
	BaseAdvertisementBean bean = new BaseAdvertisementBean();
        bean.setScheduleId(getScheduleId());
        bean.setDuration(getDuration());
        bean.setBudget(getBudget());
        bean.setPath(getPath());
        bean.setFilename(getFilename());
        bean.setCreationTimestamp(getCreationTimestamp());
        bean.setName(getName());
        bean.setAdvertisementId(getAdvertisementId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(AdvertisementBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	scheduleIdIsModified = bean.isScheduleIdModified();
  	scheduleIdIsInitialized= bean.isScheduleIdInitialized();
	durationIsModified = bean.isDurationModified();
  	durationIsInitialized= bean.isDurationInitialized();
	budgetIsModified = bean.isBudgetModified();
  	budgetIsInitialized= bean.isBudgetInitialized();
	pathIsModified = bean.isPathModified();
  	pathIsInitialized= bean.isPathInitialized();
	filenameIsModified = bean.isFilenameModified();
  	filenameIsInitialized= bean.isFilenameInitialized();
	creationTimestampIsModified = bean.isCreationTimestampModified();
  	creationTimestampIsInitialized= bean.isCreationTimestampInitialized();
	nameIsModified = bean.isNameModified();
  	nameIsInitialized= bean.isNameInitialized();
	advertisementIdIsModified = bean.isAdvertisementIdModified();
  	advertisementIdIsInitialized= bean.isAdvertisementIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("schedule_id", getScheduleId() == null ? "" : getScheduleId().toString());
        dictionnary.put("duration", getDuration() == null ? "" : getDuration().toString());
        dictionnary.put("budget", getBudget() == null ? "" : getBudget().toString());
        dictionnary.put("path", getPath() == null ? "" : getPath().toString());
        dictionnary.put("filename", getFilename() == null ? "" : getFilename().toString());
        dictionnary.put("creation_timestamp", getCreationTimestamp() == null ? "" : getCreationTimestamp().toString());
        dictionnary.put("name", getName() == null ? "" : getName().toString());
        dictionnary.put("advertisement_id", getAdvertisementId() == null ? "" : getAdvertisementId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("advertisement_id", getAdvertisementId() == null ? "" : getAdvertisementId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("schedule_id".equalsIgnoreCase(column) || "scheduleId".equalsIgnoreCase(column)) {
            return getScheduleId() == null ? "" : getScheduleId().toString();
        } else if ("duration".equalsIgnoreCase(column) || "duration".equalsIgnoreCase(column)) {
            return getDuration() == null ? "" : getDuration().toString();
        } else if ("budget".equalsIgnoreCase(column) || "budget".equalsIgnoreCase(column)) {
            return getBudget() == null ? "" : getBudget().toString();
        } else if ("path".equalsIgnoreCase(column) || "path".equalsIgnoreCase(column)) {
            return getPath() == null ? "" : getPath().toString();
        } else if ("filename".equalsIgnoreCase(column) || "filename".equalsIgnoreCase(column)) {
            return getFilename() == null ? "" : getFilename().toString();
        } else if ("creation_timestamp".equalsIgnoreCase(column) || "creationTimestamp".equalsIgnoreCase(column)) {
            return getCreationTimestamp() == null ? "" : getCreationTimestamp().toString();
        } else if ("name".equalsIgnoreCase(column) || "name".equalsIgnoreCase(column)) {
            return getName() == null ? "" : getName().toString();
        } else if ("advertisement_id".equalsIgnoreCase(column) || "advertisementId".equalsIgnoreCase(column)) {
            return getAdvertisementId() == null ? "" : getAdvertisementId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof AdvertisementBean)) {
			return false;
		}

		AdvertisementBean obj = (AdvertisementBean) object;
		return new EqualsBuilder()
            .append(getScheduleId(), obj.getScheduleId())
            .append(getDuration(), obj.getDuration())
            .append(getBudget(), obj.getBudget())
            .append(getPath(), obj.getPath())
            .append(getFilename(), obj.getFilename())
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getName(), obj.getName())
            .append(getAdvertisementId(), obj.getAdvertisementId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getScheduleId())
            .append(getDuration())
            .append(getBudget())
            .append(getPath())
            .append(getFilename())
            .append(getCreationTimestamp())
            .append(getName())
            .append(getAdvertisementId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("schedule_id", getScheduleId())
            .append("duration", getDuration())
            .append("budget", getBudget())
            .append("path", getPath())
            .append("filename", getFilename())
            .append("creation_timestamp", getCreationTimestamp())
            .append("name", getName())
            .append("advertisement_id", getAdvertisementId())
            .toString();
	}


    public int compareTo(Object object)
    {
        AdvertisementBean obj = (AdvertisementBean) object;
        return new CompareToBuilder()
            .append(getScheduleId(), obj.getScheduleId())
            .append(getDuration(), obj.getDuration())
            .append(getBudget(), obj.getBudget())
            .append(getPath(), obj.getPath())
            .append(getFilename(), obj.getFilename())
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getName(), obj.getName())
            .append(getAdvertisementId(), obj.getAdvertisementId())
            .toComparison();
   }






    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the AdvertScheduleBean object from database where advertisement.schedule_id == advert_schedule.schedule_id
     *
     * @return the associated AdvertScheduleBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED VALUES
    public AdvertScheduleBean loadAdvertSchedule() throws DAOException
    {
        AdvertScheduleBean other = AdvertScheduleManagerImpl.getInstance().createAdvertScheduleBean();
        other.setScheduleId(getScheduleId()); 
        setAdvertScheduleBean(AdvertScheduleManagerImpl.getInstance().loadUniqueUsingTemplate(other)); 
        return getAdvertScheduleBean();
    }





    /**
     * Retrieves and stores (if not already present) the AdvertScheduleBean object from the cache where advertisement.schedule_id == advert_schedule.schedule_id
     *
     * @return the associated AdvertScheduleBean bean
     * @throws DAOException
     */
    //3.4 GET IMPORTED VALUES
    public AdvertScheduleBean loadAdvertScheduleFromCache() throws DAOException
    {
        return AdvertScheduleCache.getInstance().fetchAdvertSchedule(getScheduleId());
    }



    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the AdvertisementBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public AdvertisementBean save() throws DAOException
    {
        return AdvertisementManagerImpl.getInstance().save(this);
    }

    /**
     * Update the AdvertisementBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public AdvertisementBean update() throws DAOException
    {
        return AdvertisementManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the AdvertisementBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public AdvertisementBean insert() throws DAOException
    {
        return AdvertisementManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of AdvertisementBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return AdvertisementManagerImpl.getInstance().createAdvertisementBean();
    }

    /**
     * Creates and returns a new instance of AdvertisementBean.
     *
     * @return
     */
    //15
    public static AdvertisementBean newInstance()
    {
        return AdvertisementManagerImpl.getInstance().createAdvertisementBean();
    }

    /**
     * Returns manager class for Advertisement
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return AdvertisementManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. Advertisement
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "advertisement";
    }



}
