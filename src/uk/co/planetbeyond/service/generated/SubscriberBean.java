




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.service.manager.SubscriberManagerImpl;
import uk.co.planetbeyond.service.generated.GeneratedBean;





import uk.co.planetbeyond.service.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * SubscriberBean is a mapping of subscriber Table.
 * @author sql2java
*/
@Persistent
public class SubscriberBean extends BaseSubscriberBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8212568703426682458L;
	
    private boolean creationTimestampIsModified = false;
    private boolean creationTimestampIsInitialized = false;

    private boolean deviceIdIsModified = false;
    private boolean deviceIdIsInitialized = false;

    private boolean firebaseTokenIdIsModified = false;
    private boolean firebaseTokenIdIsInitialized = false;

    private boolean nameIsModified = false;
    private boolean nameIsInitialized = false;

    private boolean msisdnIsModified = false;
    private boolean msisdnIsInitialized = false;

    private boolean subscriberIdIsModified = false;
    private boolean subscriberIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a SubscriberBean is via the createSubscriberBean method in SubscriberManager or
     * via the factory class SubscriberFactory create method
     */
    public SubscriberBean()
    {
    }



    /**
     * Setter method for creationTimestamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    @Override
    public void setCreationTimestamp(java.util.Date newVal)
    {
        if ((newVal != null && creationTimestamp != null && (newVal.compareTo(creationTimestamp) == 0)) ||
            (newVal == null && creationTimestamp == null && creationTimestampIsInitialized)) {
            return;
        }
        creationTimestamp = newVal;
        creationTimestampIsModified = true;
        creationTimestampIsInitialized = true;
    }

    /**
     * Setter method for creationTimestamp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    public void setCreationTimestamp(long newVal)
    {
        setCreationTimestamp(new java.util.Date(newVal));
    }

    /**
     * Determines if the creationTimestamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreationTimestampModified()
    {
        return creationTimestampIsModified;
    }

    /**
     * Manually set whether creationTimestamp has been modified or not.
     */
    public void isCreationTimestampModified(boolean value)
    {
        creationTimestampIsModified = value;
    }	

    /**
     * Determines if the creationTimestamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreationTimestampInitialized()
    {
        return creationTimestampIsInitialized;
    }

    /**
     * Manually set whether creationTimestamp has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCreationTimestampInitialized(boolean value)
    {
        creationTimestampIsInitialized = value;
    }



    /**
     * Setter method for deviceId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to deviceId
     */
    @Override
    public void setDeviceId(String newVal)
    {
        if ((newVal != null && deviceId != null && (newVal.compareTo(deviceId) == 0)) ||
            (newVal == null && deviceId == null && deviceIdIsInitialized)) {
            return;
        }
        deviceId = newVal;
        deviceIdIsModified = true;
        deviceIdIsInitialized = true;
    }

    /**
     * Determines if the deviceId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeviceIdModified()
    {
        return deviceIdIsModified;
    }

    /**
     * Manually set whether deviceId has been modified or not.
     */
    public void isDeviceIdModified(boolean value)
    {
        deviceIdIsModified = value;
    }	

    /**
     * Determines if the deviceId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeviceIdInitialized()
    {
        return deviceIdIsInitialized;
    }

    /**
     * Manually set whether deviceId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isDeviceIdInitialized(boolean value)
    {
        deviceIdIsInitialized = value;
    }



    /**
     * Setter method for firebaseTokenId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to firebaseTokenId
     */
    @Override
    public void setFirebaseTokenId(String newVal)
    {
        if ((newVal != null && firebaseTokenId != null && (newVal.compareTo(firebaseTokenId) == 0)) ||
            (newVal == null && firebaseTokenId == null && firebaseTokenIdIsInitialized)) {
            return;
        }
        firebaseTokenId = newVal;
        firebaseTokenIdIsModified = true;
        firebaseTokenIdIsInitialized = true;
    }

    /**
     * Determines if the firebaseTokenId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFirebaseTokenIdModified()
    {
        return firebaseTokenIdIsModified;
    }

    /**
     * Manually set whether firebaseTokenId has been modified or not.
     */
    public void isFirebaseTokenIdModified(boolean value)
    {
        firebaseTokenIdIsModified = value;
    }	

    /**
     * Determines if the firebaseTokenId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFirebaseTokenIdInitialized()
    {
        return firebaseTokenIdIsInitialized;
    }

    /**
     * Manually set whether firebaseTokenId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isFirebaseTokenIdInitialized(boolean value)
    {
        firebaseTokenIdIsInitialized = value;
    }



    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    @Override
    public void setName(String newVal)
    {
        if ((newVal != null && name != null && (newVal.compareTo(name) == 0)) ||
            (newVal == null && name == null && nameIsInitialized)) {
            return;
        }
        name = newVal;
        nameIsModified = true;
        nameIsInitialized = true;
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified()
    {
        return nameIsModified;
    }

    /**
     * Manually set whether name has been modified or not.
     */
    public void isNameModified(boolean value)
    {
        nameIsModified = value;
    }	

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized()
    {
        return nameIsInitialized;
    }

    /**
     * Manually set whether name has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isNameInitialized(boolean value)
    {
        nameIsInitialized = value;
    }



    /**
     * Setter method for msisdn.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to msisdn
     */
    @Override
    public void setMsisdn(String newVal)
    {
        if ((newVal != null && msisdn != null && (newVal.compareTo(msisdn) == 0)) ||
            (newVal == null && msisdn == null && msisdnIsInitialized)) {
            return;
        }
        msisdn = newVal;
        msisdnIsModified = true;
        msisdnIsInitialized = true;
    }

    /**
     * Determines if the msisdn has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMsisdnModified()
    {
        return msisdnIsModified;
    }

    /**
     * Manually set whether msisdn has been modified or not.
     */
    public void isMsisdnModified(boolean value)
    {
        msisdnIsModified = value;
    }	

    /**
     * Determines if the msisdn has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMsisdnInitialized()
    {
        return msisdnIsInitialized;
    }

    /**
     * Manually set whether msisdn has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isMsisdnInitialized(boolean value)
    {
        msisdnIsInitialized = value;
    }



    /**
     * Setter method for subscriberId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to subscriberId
     */
    @Override
    public void setSubscriberId(Integer newVal)
    {
        if ((newVal != null && subscriberId != null && (newVal.compareTo(subscriberId) == 0)) ||
            (newVal == null && subscriberId == null && subscriberIdIsInitialized)) {
            return;
        }
        subscriberId = newVal;
        subscriberIdIsModified = true;
        subscriberIdIsInitialized = true;
    }

    /**
     * Setter method for subscriberId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to subscriberId
     */
    public void setSubscriberId(int newVal)
    {
        setSubscriberId(new Integer(newVal));
    }

    /**
     * Determines if the subscriberId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSubscriberIdModified()
    {
        return subscriberIdIsModified;
    }

    /**
     * Manually set whether subscriberId has been modified or not.
     */
    public void isSubscriberIdModified(boolean value)
    {
        subscriberIdIsModified = value;
    }	

    /**
     * Determines if the subscriberId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSubscriberIdInitialized()
    {
        return subscriberIdIsInitialized;
    }

    /**
     * Manually set whether subscriberId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSubscriberIdInitialized(boolean value)
    {
        subscriberIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return creationTimestampIsModified 		|| deviceIdIsModified  		|| firebaseTokenIdIsModified  		|| nameIsModified  		|| msisdnIsModified  		|| subscriberIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        creationTimestampIsModified = isModified;
        deviceIdIsModified = isModified;
        firebaseTokenIdIsModified = isModified;
        nameIsModified = isModified;
        msisdnIsModified = isModified;
        subscriberIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SubscriberBean bean)
    {
        setCreationTimestamp(bean.getCreationTimestamp());
        setDeviceId(bean.getDeviceId());
        setFirebaseTokenId(bean.getFirebaseTokenId());
        setName(bean.getName());
        setMsisdn(bean.getMsisdn());
        setSubscriberId(bean.getSubscriberId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseSubscriberBean toBaseBean()
    {
	BaseSubscriberBean bean = new BaseSubscriberBean();
        bean.setCreationTimestamp(getCreationTimestamp());
        bean.setDeviceId(getDeviceId());
        bean.setFirebaseTokenId(getFirebaseTokenId());
        bean.setName(getName());
        bean.setMsisdn(getMsisdn());
        bean.setSubscriberId(getSubscriberId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(SubscriberBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	creationTimestampIsModified = bean.isCreationTimestampModified();
  	creationTimestampIsInitialized= bean.isCreationTimestampInitialized();
	deviceIdIsModified = bean.isDeviceIdModified();
  	deviceIdIsInitialized= bean.isDeviceIdInitialized();
	firebaseTokenIdIsModified = bean.isFirebaseTokenIdModified();
  	firebaseTokenIdIsInitialized= bean.isFirebaseTokenIdInitialized();
	nameIsModified = bean.isNameModified();
  	nameIsInitialized= bean.isNameInitialized();
	msisdnIsModified = bean.isMsisdnModified();
  	msisdnIsInitialized= bean.isMsisdnInitialized();
	subscriberIdIsModified = bean.isSubscriberIdModified();
  	subscriberIdIsInitialized= bean.isSubscriberIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("creation_timestamp", getCreationTimestamp() == null ? "" : getCreationTimestamp().toString());
        dictionnary.put("device_id", getDeviceId() == null ? "" : getDeviceId().toString());
        dictionnary.put("firebase_token_id", getFirebaseTokenId() == null ? "" : getFirebaseTokenId().toString());
        dictionnary.put("name", getName() == null ? "" : getName().toString());
        dictionnary.put("msisdn", getMsisdn() == null ? "" : getMsisdn().toString());
        dictionnary.put("subscriber_id", getSubscriberId() == null ? "" : getSubscriberId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("subscriber_id", getSubscriberId() == null ? "" : getSubscriberId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("creation_timestamp".equalsIgnoreCase(column) || "creationTimestamp".equalsIgnoreCase(column)) {
            return getCreationTimestamp() == null ? "" : getCreationTimestamp().toString();
        } else if ("device_id".equalsIgnoreCase(column) || "deviceId".equalsIgnoreCase(column)) {
            return getDeviceId() == null ? "" : getDeviceId().toString();
        } else if ("firebase_token_id".equalsIgnoreCase(column) || "firebaseTokenId".equalsIgnoreCase(column)) {
            return getFirebaseTokenId() == null ? "" : getFirebaseTokenId().toString();
        } else if ("name".equalsIgnoreCase(column) || "name".equalsIgnoreCase(column)) {
            return getName() == null ? "" : getName().toString();
        } else if ("msisdn".equalsIgnoreCase(column) || "msisdn".equalsIgnoreCase(column)) {
            return getMsisdn() == null ? "" : getMsisdn().toString();
        } else if ("subscriber_id".equalsIgnoreCase(column) || "subscriberId".equalsIgnoreCase(column)) {
            return getSubscriberId() == null ? "" : getSubscriberId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof SubscriberBean)) {
			return false;
		}

		SubscriberBean obj = (SubscriberBean) object;
		return new EqualsBuilder()
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getDeviceId(), obj.getDeviceId())
            .append(getFirebaseTokenId(), obj.getFirebaseTokenId())
            .append(getName(), obj.getName())
            .append(getMsisdn(), obj.getMsisdn())
            .append(getSubscriberId(), obj.getSubscriberId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getCreationTimestamp())
            .append(getDeviceId())
            .append(getFirebaseTokenId())
            .append(getName())
            .append(getMsisdn())
            .append(getSubscriberId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("creation_timestamp", getCreationTimestamp())
            .append("device_id", getDeviceId())
            .append("firebase_token_id", getFirebaseTokenId())
            .append("name", getName())
            .append("msisdn", getMsisdn())
            .append("subscriber_id", getSubscriberId())
            .toString();
	}


    public int compareTo(Object object)
    {
        SubscriberBean obj = (SubscriberBean) object;
        return new CompareToBuilder()
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getDeviceId(), obj.getDeviceId())
            .append(getFirebaseTokenId(), obj.getFirebaseTokenId())
            .append(getName(), obj.getName())
            .append(getMsisdn(), obj.getMsisdn())
            .append(getSubscriberId(), obj.getSubscriberId())
            .toComparison();
   }






    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the SubscriberBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public SubscriberBean save() throws DAOException
    {
        return SubscriberManagerImpl.getInstance().save(this);
    }

    /**
     * Update the SubscriberBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public SubscriberBean update() throws DAOException
    {
        return SubscriberManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the SubscriberBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public SubscriberBean insert() throws DAOException
    {
        return SubscriberManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of SubscriberBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return SubscriberManagerImpl.getInstance().createSubscriberBean();
    }

    /**
     * Creates and returns a new instance of SubscriberBean.
     *
     * @return
     */
    //15
    public static SubscriberBean newInstance()
    {
        return SubscriberManagerImpl.getInstance().createSubscriberBean();
    }

    /**
     * Returns manager class for Subscriber
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return SubscriberManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. Subscriber
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "subscriber";
    }



}
